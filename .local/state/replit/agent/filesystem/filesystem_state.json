{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# PC Worx Electronics E-Commerce Platform\n\n## Overview\n\nPC Worx is a full-stack Progressive Web App (PWA) built for selling electronics in the Kenyan market, specifically targeting Nairobi customers. The platform features a modern React frontend with a Node.js/Express backend, utilizing PostgreSQL for data persistence and cloud storage for images. The application supports both customer-facing shopping experiences and comprehensive admin management capabilities, with full PWA features including offline functionality, installability, and push notifications. The app is deployment-ready for Vercel, Netlify, and local hosting.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\nThe client-side application is built with React using functional components and hooks, organized in a modular structure under the `client/` directory. The frontend implements:\n\n- **Component-based architecture** using a combination of custom components and shadcn/ui design system components\n- **Client-side routing** via Wouter for navigation between pages\n- **State management** through React Context API for authentication (AuthContext) and shopping cart (CartContext)\n- **Styling framework** using Tailwind CSS with custom CSS variables for theming\n- **Form handling** with React Hook Form and Zod validation schemas\n- **Data fetching** powered by TanStack React Query for server state management\n\n### Backend Architecture\nThe server-side implementation follows a REST API pattern built with Express.js:\n\n- **RESTful API design** with route handlers organized in `/server/routes.ts`\n- **Authentication system** using JWT tokens with role-based access control (user, standard_admin, main_admin)\n- **Database abstraction layer** through a storage interface pattern in `/server/storage.ts`\n- **Middleware implementation** for authentication, authorization, and request logging\n- **Development tooling** with Vite integration for hot module replacement\n\n### Database Design\nThe application uses PostgreSQL with Drizzle ORM for type-safe database operations:\n\n- **Schema-first approach** with all table definitions in `/shared/schema.ts`\n- **Relational data model** supporting users, products, orders, order items, reviews, wishlists, and admin activity logs\n- **Type safety** through Drizzle's TypeScript integration and Zod validation schemas\n- **Migration support** via Drizzle Kit for schema evolution\n\n### Authentication & Authorization\nMulti-tier security implementation:\n\n- **JWT-based authentication** with secure token storage in localStorage\n- **Role-based access control** supporting three user levels: regular users, standard admins, and main admins\n- **Unified login system** where all users including admins use the same login interface\n- **Protected routes** with middleware validation for API endpoints and frontend route guards\n\n### PWA Features\nEnhanced mobile experience through Progressive Web App capabilities:\n\n- **App manifest** configuration in `/client/public/manifest.json` for home screen installation\n- **Service worker** implementation for offline caching and performance optimization\n- **Responsive design** optimized for mobile and desktop experiences\n\n### SEO & Content Management\nSearch engine optimization and content discoverability:\n\n- **Dynamic meta tag generation** for product and category pages\n- **Sitemap generation** through backend API endpoints\n- **Robots.txt serving** for search engine crawler guidance\n- **Semantic HTML structure** with proper heading hierarchy and alt text\n\n## External Dependencies\n\n### Database & ORM\n- **Neon Database** (@neondatabase/serverless) - Serverless PostgreSQL hosting platform\n- **Drizzle ORM** - Type-safe database toolkit with PostgreSQL dialect support\n\n### Frontend Libraries\n- **Radix UI** - Comprehensive component library for accessible UI primitives\n- **Tailwind CSS** - Utility-first CSS framework for styling\n- **TanStack React Query** - Data fetching and server state management\n- **Wouter** - Minimalist client-side routing solution\n- **React Hook Form** - Performance-focused form library\n\n### Backend Dependencies\n- **Express.js** - Web application framework for Node.js\n- **bcrypt** - Password hashing library for secure authentication\n- **jsonwebtoken** - JWT implementation for token-based authentication\n\n### Development Tools\n- **Vite** - Build tool and development server with HMR support\n- **TypeScript** - Type safety across the entire application stack\n- **ESBuild** - Fast JavaScript bundler for production builds\n\n### Third-party Services\n- **Font Awesome** - Icon library loaded via CDN\n- **Google Fonts** - Web font service for Inter font family\n- **Replit Development Banner** - Development environment integration","size_bytes":4782},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2755},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\";\nimport { z } from \"zod\";\nimport { insertUserSchema, insertProductSchema, insertOrderSchema, insertReviewSchema } from \"@shared/schema\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"your-super-secret-jwt-key\";\n\n// Middleware to verify JWT token\nconst authenticateToken = async (req: any, res: any, next: any) => {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1];\n\n  if (!token) {\n    return res.status(401).json({ message: 'Access token required' });\n  }\n\n  try {\n    const decoded = jwt.verify(token, JWT_SECRET) as any;\n    const user = await storage.getUser(decoded.userId);\n    if (!user) {\n      return res.status(401).json({ message: 'User not found' });\n    }\n    req.user = user;\n    next();\n  } catch (error) {\n    return res.status(403).json({ message: 'Invalid token' });\n  }\n};\n\n// Middleware to verify admin role\nconst requireAdmin = (req: any, res: any, next: any) => {\n  if (!req.user || (req.user.adminRole !== 'standard_admin' && req.user.adminRole !== 'main_admin')) {\n    return res.status(403).json({ message: 'Admin access required' });\n  }\n  next();\n};\n\n// Middleware to verify main admin role\nconst requireMainAdmin = (req: any, res: any, next: any) => {\n  if (!req.user || req.user.adminRole !== 'main_admin') {\n    return res.status(403).json({ message: 'Main admin access required' });\n  }\n  next();\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth routes\n  app.post(\"/api/register\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(userData.email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"User already exists\" });\n      }\n\n      // Hash password\n      const passwordHash = await bcrypt.hash(userData.passwordHash, 10);\n      \n      const user = await storage.createUser({\n        ...userData,\n        passwordHash,\n        adminRole: \"none\"\n      });\n\n      res.status(201).json({ message: \"User created successfully\", userId: user.id });\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      res.status(400).json({ message: \"Invalid registration data\" });\n    }\n  });\n\n  app.post(\"/api/login\", async (req, res) => {\n    try {\n      const { email, password } = req.body;\n      \n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const validPassword = await bcrypt.compare(password, user.passwordHash);\n      if (!validPassword) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const token = jwt.sign({ userId: user.id }, JWT_SECRET, { expiresIn: '7d' });\n      \n      res.json({\n        token,\n        user: {\n          id: user.id,\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          adminRole: user.adminRole\n        }\n      });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      res.status(500).json({ message: \"Login failed\" });\n    }\n  });\n\n  // Admin login removed - admins now use regular login\n\n  // Product routes\n  app.get(\"/api/products\", async (req, res) => {\n    try {\n      const { search, category, sort } = req.query;\n      let products;\n\n      if (search) {\n        products = await storage.searchProducts(search as string);\n      } else if (category) {\n        products = await storage.getProductsByCategory(category as string);\n      } else {\n        products = await storage.getAllProducts();\n      }\n\n      // Sort products if requested\n      if (sort) {\n        switch (sort) {\n          case 'price_asc':\n            products.sort((a, b) => Number(a.price) - Number(b.price));\n            break;\n          case 'price_desc':\n            products.sort((a, b) => Number(b.price) - Number(a.price));\n            break;\n          case 'name':\n            products.sort((a, b) => a.name.localeCompare(b.name));\n            break;\n          case 'rating':\n            products.sort((a, b) => Number(b.averageRating) - Number(a.averageRating));\n            break;\n        }\n      }\n\n      res.json(products);\n    } catch (error) {\n      console.error(\"Products fetch error:\", error);\n      res.status(500).json({ message: \"Failed to fetch products\" });\n    }\n  });\n\n  app.get(\"/api/products/featured\", async (req, res) => {\n    try {\n      const products = await storage.getFeaturedProducts();\n      res.json(products);\n    } catch (error) {\n      console.error(\"Featured products fetch error:\", error);\n      res.status(500).json({ message: \"Failed to fetch featured products\" });\n    }\n  });\n\n  app.get(\"/api/products/:id\", async (req, res) => {\n    try {\n      const product = await storage.getProduct(req.params.id);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (error) {\n      console.error(\"Product fetch error:\", error);\n      res.status(500).json({ message: \"Failed to fetch product\" });\n    }\n  });\n\n  app.post(\"/api/products\", authenticateToken, requireAdmin, async (req: any, res) => {\n    try {\n      const productData = insertProductSchema.parse(req.body);\n      const product = await storage.createProduct(productData);\n      \n      // Log admin activity\n      await storage.logAdminActivity({\n        adminId: req.user.id,\n        actionType: \"Product Added\",\n        actionDetails: { productName: product.name, productId: product.id }\n      });\n\n      res.status(201).json(product);\n    } catch (error) {\n      console.error(\"Product creation error:\", error);\n      res.status(400).json({ message: \"Invalid product data\" });\n    }\n  });\n\n  app.put(\"/api/products/:id\", authenticateToken, requireAdmin, async (req: any, res) => {\n    try {\n      const productData = insertProductSchema.partial().parse(req.body);\n      const product = await storage.updateProduct(req.params.id, productData);\n      \n      // Log admin activity\n      await storage.logAdminActivity({\n        adminId: req.user.id,\n        actionType: \"Product Updated\",\n        actionDetails: { productName: product.name, productId: product.id }\n      });\n\n      res.json(product);\n    } catch (error) {\n      console.error(\"Product update error:\", error);\n      res.status(400).json({ message: \"Failed to update product\" });\n    }\n  });\n\n  app.delete(\"/api/products/:id\", authenticateToken, requireAdmin, async (req: any, res) => {\n    try {\n      const product = await storage.getProduct(req.params.id);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n\n      await storage.deleteProduct(req.params.id);\n      \n      // Log admin activity\n      await storage.logAdminActivity({\n        adminId: req.user.id,\n        actionType: \"Product Deleted\",\n        actionDetails: { productName: product.name, productId: product.id }\n      });\n\n      res.json({ message: \"Product deleted successfully\" });\n    } catch (error) {\n      console.error(\"Product deletion error:\", error);\n      res.status(500).json({ message: \"Failed to delete product\" });\n    }\n  });\n\n  // Order routes\n  app.post(\"/api/orders\", authenticateToken, async (req: any, res) => {\n    try {\n      const { items, customerName, deliveryAddress, contactNumber } = req.body;\n      \n      // Calculate total\n      let total = 0;\n      for (const item of items) {\n        const product = await storage.getProduct(item.productId);\n        if (!product) {\n          return res.status(400).json({ message: `Product ${item.productId} not found` });\n        }\n        if (product.stock < item.quantity) {\n          return res.status(400).json({ message: `Insufficient stock for ${product.name}` });\n        }\n        total += Number(product.price) * item.quantity;\n      }\n\n      // Create order\n      const order = await storage.createOrder({\n        userId: req.user.id,\n        customerName,\n        deliveryAddress,\n        contactNumber,\n        total: total.toString(),\n        status: \"pending\"\n      });\n\n      // Create order items and update stock\n      for (const item of items) {\n        const product = await storage.getProduct(item.productId);\n        await storage.createOrderItem({\n          orderId: order.id,\n          productId: item.productId,\n          quantity: item.quantity,\n          priceAtTimeOfOrder: product!.price\n        });\n\n        // Update stock\n        await storage.updateProduct(item.productId, {\n          stock: product!.stock - item.quantity\n        });\n      }\n\n      res.status(201).json(order);\n    } catch (error) {\n      console.error(\"Order creation error:\", error);\n      res.status(500).json({ message: \"Failed to create order\" });\n    }\n  });\n\n  app.get(\"/api/users/:id/orders\", authenticateToken, async (req: any, res) => {\n    try {\n      if (req.user.id !== req.params.id && req.user.adminRole === 'none') {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const orders = await storage.getUserOrders(req.params.id);\n      res.json(orders);\n    } catch (error) {\n      console.error(\"User orders fetch error:\", error);\n      res.status(500).json({ message: \"Failed to fetch orders\" });\n    }\n  });\n\n  app.get(\"/api/orders/all\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const orders = await storage.getAllOrders();\n      res.json(orders);\n    } catch (error) {\n      console.error(\"All orders fetch error:\", error);\n      res.status(500).json({ message: \"Failed to fetch orders\" });\n    }\n  });\n\n  app.put(\"/api/orders/:id/status\", authenticateToken, requireAdmin, async (req: any, res) => {\n    try {\n      const { status } = req.body;\n      const order = await storage.updateOrderStatus(req.params.id, status);\n      \n      // Log admin activity\n      await storage.logAdminActivity({\n        adminId: req.user.id,\n        actionType: \"Order Status Changed\",\n        actionDetails: { orderId: order.id, newStatus: status }\n      });\n\n      res.json(order);\n    } catch (error) {\n      console.error(\"Order status update error:\", error);\n      res.status(500).json({ message: \"Failed to update order status\" });\n    }\n  });\n\n  // Review routes\n  app.get(\"/api/products/:id/reviews\", async (req, res) => {\n    try {\n      const reviews = await storage.getProductReviews(req.params.id);\n      res.json(reviews);\n    } catch (error) {\n      console.error(\"Reviews fetch error:\", error);\n      res.status(500).json({ message: \"Failed to fetch reviews\" });\n    }\n  });\n\n  app.post(\"/api/products/:id/reviews\", authenticateToken, async (req: any, res) => {\n    try {\n      const { rating, comment } = req.body;\n      const review = await storage.createReview({\n        productId: req.params.id,\n        userId: req.user.id,\n        rating,\n        comment\n      });\n      res.status(201).json(review);\n    } catch (error) {\n      console.error(\"Review creation error:\", error);\n      res.status(500).json({ message: \"Failed to create review\" });\n    }\n  });\n\n  // Wishlist routes\n  app.get(\"/api/users/:id/wishlist\", authenticateToken, async (req: any, res) => {\n    try {\n      if (req.user.id !== req.params.id && req.user.adminRole === 'none') {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const wishlist = await storage.getUserWishlist(req.params.id);\n      res.json(wishlist);\n    } catch (error) {\n      console.error(\"Wishlist fetch error:\", error);\n      res.status(500).json({ message: \"Failed to fetch wishlist\" });\n    }\n  });\n\n  app.post(\"/api/wishlist\", authenticateToken, async (req: any, res) => {\n    try {\n      const { productId } = req.body;\n      const wishlist = await storage.addToWishlist({\n        userId: req.user.id,\n        productId\n      });\n      res.status(201).json(wishlist);\n    } catch (error) {\n      console.error(\"Wishlist add error:\", error);\n      res.status(500).json({ message: \"Failed to add to wishlist\" });\n    }\n  });\n\n  app.delete(\"/api/wishlist/:productId\", authenticateToken, async (req: any, res) => {\n    try {\n      await storage.removeFromWishlist(req.user.id, req.params.productId);\n      res.json({ message: \"Removed from wishlist\" });\n    } catch (error) {\n      console.error(\"Wishlist remove error:\", error);\n      res.status(500).json({ message: \"Failed to remove from wishlist\" });\n    }\n  });\n\n  // Admin-only routes\n  app.post(\"/api/admin/create-standard-admin\", authenticateToken, requireMainAdmin, async (req: any, res) => {\n    try {\n      const { email, password } = req.body;\n      \n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"User already exists\" });\n      }\n\n      const passwordHash = await bcrypt.hash(password, 10);\n      \n      const admin = await storage.createUser({\n        email,\n        passwordHash,\n        adminRole: \"standard_admin\"\n      });\n\n      // Log admin activity\n      await storage.logAdminActivity({\n        adminId: req.user.id,\n        actionType: \"Admin Created\",\n        actionDetails: { adminEmail: admin.email, adminId: admin.id }\n      });\n\n      res.status(201).json({ message: \"Standard admin created successfully\" });\n    } catch (error) {\n      console.error(\"Admin creation error:\", error);\n      res.status(500).json({ message: \"Failed to create admin\" });\n    }\n  });\n\n  app.get(\"/api/users/all\", authenticateToken, requireMainAdmin, async (req, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      console.error(\"Users fetch error:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.delete(\"/api/users/:id\", authenticateToken, requireMainAdmin, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.params.id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      await storage.deleteUser(req.params.id);\n      \n      // Log admin activity\n      await storage.logAdminActivity({\n        adminId: req.user.id,\n        actionType: \"User Deleted\",\n        actionDetails: { userEmail: user.email, userId: user.id }\n      });\n\n      res.json({ message: \"User deleted successfully\" });\n    } catch (error) {\n      console.error(\"User deletion error:\", error);\n      res.status(500).json({ message: \"Failed to delete user\" });\n    }\n  });\n\n  app.put(\"/api/users/:id/role\", authenticateToken, requireMainAdmin, async (req: any, res) => {\n    try {\n      const { adminRole } = req.body;\n      const user = await storage.updateUser(req.params.id, { adminRole });\n      \n      // Log admin activity\n      await storage.logAdminActivity({\n        adminId: req.user.id,\n        actionType: \"User Role Changed\",\n        actionDetails: { userEmail: user.email, newRole: adminRole }\n      });\n\n      res.json(user);\n    } catch (error) {\n      console.error(\"User role update error:\", error);\n      res.status(500).json({ message: \"Failed to update user role\" });\n    }\n  });\n\n  app.get(\"/api/reports/revenue\", authenticateToken, requireMainAdmin, async (req, res) => {\n    try {\n      const stats = await storage.getRevenueStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Revenue stats error:\", error);\n      res.status(500).json({ message: \"Failed to fetch revenue stats\" });\n    }\n  });\n\n  app.get(\"/api/reports/products/download\", authenticateToken, requireMainAdmin, async (req, res) => {\n    try {\n      const products = await storage.getAllProducts();\n      res.setHeader('Content-Type', 'application/json');\n      res.setHeader('Content-Disposition', 'attachment; filename=products.json');\n      res.json(products);\n    } catch (error) {\n      console.error(\"Products download error:\", error);\n      res.status(500).json({ message: \"Failed to download products\" });\n    }\n  });\n\n  app.get(\"/api/admin/activity-log\", authenticateToken, requireMainAdmin, async (req, res) => {\n    try {\n      const logs = await storage.getAdminActivityLog();\n      res.json(logs);\n    } catch (error) {\n      console.error(\"Activity log fetch error:\", error);\n      res.status(500).json({ message: \"Failed to fetch activity log\" });\n    }\n  });\n\n  app.get(\"/api/reports/top-products\", authenticateToken, requireMainAdmin, async (req, res) => {\n    try {\n      const topProducts = await storage.getTopProducts();\n      res.json(topProducts);\n    } catch (error) {\n      console.error(\"Top products fetch error:\", error);\n      res.status(500).json({ message: \"Failed to fetch top products\" });\n    }\n  });\n\n  // SEO routes\n  app.get(\"/sitemap.xml\", async (req, res) => {\n    try {\n      const products = await storage.getAllProducts();\n      const baseUrl = `https://${req.get('host')}`;\n      \n      let sitemap = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n  <url>\n    <loc>${baseUrl}</loc>\n    <lastmod>${new Date().toISOString()}</lastmod>\n    <priority>1.0</priority>\n  </url>\n  <url>\n    <loc>${baseUrl}/products</loc>\n    <lastmod>${new Date().toISOString()}</lastmod>\n    <priority>0.8</priority>\n  </url>`;\n\n      for (const product of products) {\n        sitemap += `\n  <url>\n    <loc>${baseUrl}/products/${product.id}</loc>\n    <lastmod>${product.updatedAt?.toISOString() || new Date().toISOString()}</lastmod>\n    <priority>0.6</priority>\n  </url>`;\n      }\n\n      sitemap += `\n</urlset>`;\n\n      res.setHeader('Content-Type', 'application/xml');\n      res.send(sitemap);\n    } catch (error) {\n      console.error(\"Sitemap generation error:\", error);\n      res.status(500).json({ message: \"Failed to generate sitemap\" });\n    }\n  });\n\n  app.get(\"/robots.txt\", (req, res) => {\n    const robotsTxt = `User-agent: *\nAllow: /\nDisallow: /admin/\nDisallow: /dashboard/\nDisallow: /api/\n\nSitemap: https://${req.get('host')}/sitemap.xml`;\n\n    res.setHeader('Content-Type', 'text/plain');\n    res.send(robotsTxt);\n  });\n\n  // Create main admin if it doesn't exist\n  const createMainAdmin = async () => {\n    try {\n      const existingAdmin = await storage.getUserByEmail(\"jabezmageto78@gmail.com\");\n      if (!existingAdmin) {\n        const passwordHash = await bcrypt.hash(\"lokeshen@58\", 10);\n        await storage.createUser({\n          email: \"jabezmageto78@gmail.com\",\n          passwordHash,\n          adminRole: \"main_admin\",\n          firstName: \"Main\",\n          lastName: \"Admin\"\n        });\n        console.log(\"Main admin account created\");\n      }\n    } catch (error) {\n      console.error(\"Failed to create main admin:\", error);\n    }\n  };\n\n  // Initialize main admin\n  await createMainAdmin();\n\n  // Database image upload and serving routes\n  app.post(\"/api/images/upload\", authenticateToken, requireAdmin, async (req: any, res) => {\n    try {\n      const { filename, mimeType, data } = req.body;\n      \n      if (!filename || !mimeType || !data) {\n        return res.status(400).json({ error: \"Missing required fields: filename, mimeType, data\" });\n      }\n\n      // Validate base64 data\n      const base64Data = data.replace(/^data:image\\/[a-z]+;base64,/, '');\n      const buffer = Buffer.from(base64Data, 'base64');\n      \n      const image = await storage.createImage({\n        filename,\n        mimeType,\n        data: base64Data,\n        size: buffer.length,\n      });\n      \n      res.json({ imageId: image.id, url: `/api/images/${image.id}` });\n    } catch (error) {\n      console.error(\"Error uploading image:\", error);\n      res.status(500).json({ error: \"Failed to upload image\" });\n    }\n  });\n\n  app.get(\"/api/images/:id\", async (req, res) => {\n    try {\n      const image = await storage.getImage(req.params.id);\n      \n      if (!image) {\n        return res.status(404).json({ error: \"Image not found\" });\n      }\n      \n      const buffer = Buffer.from(image.data, 'base64');\n      res.set({\n        'Content-Type': image.mimeType,\n        'Content-Length': buffer.length,\n        'Cache-Control': 'public, max-age=31536000', // Cache for 1 year\n      });\n      \n      res.send(buffer);\n    } catch (error) {\n      console.error(\"Error serving image:\", error);\n      res.status(500).json({ error: \"Failed to serve image\" });\n    }\n  });\n\n  // Object storage routes for public file serving and uploads\n  const { ObjectStorageService } = await import('./objectStorage');\n  \n  // Serve public assets from object storage\n  app.get(\"/public-objects/:filePath(*)\", async (req, res) => {\n    const filePath = req.params.filePath;\n    const objectStorageService = new ObjectStorageService();\n    try {\n      const file = await objectStorageService.searchPublicObject(filePath);\n      if (!file) {\n        return res.status(404).json({ error: \"File not found\" });\n      }\n      objectStorageService.downloadObject(file, res);\n    } catch (error) {\n      console.error(\"Error searching for public object:\", error);\n      return res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Get upload URL for public images (product photos)\n  app.post(\"/api/objects/upload\", authenticateToken, requireAdmin, async (req: any, res) => {\n    try {\n      const objectStorageService = new ObjectStorageService();\n      const uploadURL = await objectStorageService.getPublicUploadURL();\n      res.json({ uploadURL });\n    } catch (error) {\n      console.error(\"Error getting upload URL:\", error);\n      res.status(500).json({ error: \"Failed to get upload URL\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":21799},"server/storage.ts":{"content":"import {\n  users,\n  products,\n  orders,\n  orderItems,\n  reviews,\n  wishlists,\n  adminActivityLog,\n  images,\n  type User,\n  type InsertUser,\n  type Product,\n  type InsertProduct,\n  type Order,\n  type InsertOrder,\n  type OrderItem,\n  type InsertOrderItem,\n  type Review,\n  type InsertReview,\n  type Wishlist,\n  type InsertWishlist,\n  type AdminActivityLog,\n  type InsertAdminActivityLog,\n  type Image,\n  type InsertImage,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, asc, and, or, like, count, sum, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, user: Partial<InsertUser>): Promise<User>;\n  deleteUser(id: string): Promise<void>;\n  getAllUsers(): Promise<User[]>;\n\n  // Product operations\n  getProduct(id: string): Promise<Product | undefined>;\n  getAllProducts(): Promise<Product[]>;\n  searchProducts(query: string): Promise<Product[]>;\n  getProductsByCategory(category: string): Promise<Product[]>;\n  getFeaturedProducts(): Promise<Product[]>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: string, product: Partial<InsertProduct>): Promise<Product>;\n  deleteProduct(id: string): Promise<void>;\n\n  // Order operations\n  getOrder(id: string): Promise<Order | undefined>;\n  getUserOrders(userId: string): Promise<Order[]>;\n  getAllOrders(): Promise<Order[]>;\n  createOrder(order: InsertOrder): Promise<Order>;\n  updateOrderStatus(id: string, status: string): Promise<Order>;\n  \n  // Order items operations\n  getOrderItems(orderId: string): Promise<OrderItem[]>;\n  createOrderItem(orderItem: InsertOrderItem): Promise<OrderItem>;\n\n  // Review operations\n  getProductReviews(productId: string): Promise<Review[]>;\n  createReview(review: InsertReview): Promise<Review>;\n  updateProductRating(productId: string): Promise<void>;\n\n  // Wishlist operations\n  getUserWishlist(userId: string): Promise<Wishlist[]>;\n  addToWishlist(wishlist: InsertWishlist): Promise<Wishlist>;\n  removeFromWishlist(userId: string, productId: string): Promise<void>;\n\n  // Admin activity log\n  logAdminActivity(log: InsertAdminActivityLog): Promise<AdminActivityLog>;\n  getAdminActivityLog(): Promise<AdminActivityLog[]>;\n\n  // Image operations\n  createImage(image: InsertImage): Promise<Image>;\n  getImage(id: string): Promise<Image | undefined>;\n  deleteImage(id: string): Promise<void>;\n\n  // Reports\n  getRevenueStats(): Promise<{ totalRevenue: number; totalOrders: number; }>;\n  getTopProducts(): Promise<Array<{ productName: string; totalSold: number; }>>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(insertUser).returning();\n    return user;\n  }\n\n  async updateUser(id: string, userData: Partial<InsertUser>): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set(userData)\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async deleteUser(id: string): Promise<void> {\n    await db.delete(users).where(eq(users.id, id));\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users).orderBy(desc(users.createdAt));\n  }\n\n  // Product operations\n  async getProduct(id: string): Promise<Product | undefined> {\n    const [product] = await db.select().from(products).where(eq(products.id, id));\n    return product || undefined;\n  }\n\n  async getAllProducts(): Promise<Product[]> {\n    return await db.select().from(products).orderBy(desc(products.createdAt));\n  }\n\n  async searchProducts(query: string): Promise<Product[]> {\n    return await db\n      .select()\n      .from(products)\n      .where(\n        or(\n          like(products.name, `%${query}%`),\n          like(products.description, `%${query}%`),\n          like(products.brand, `%${query}%`)\n        )\n      );\n  }\n\n  async getProductsByCategory(category: string): Promise<Product[]> {\n    return await db\n      .select()\n      .from(products)\n      .where(eq(products.category, category));\n  }\n\n  async getFeaturedProducts(): Promise<Product[]> {\n    return await db\n      .select()\n      .from(products)\n      .where(eq(products.featured, true))\n      .limit(8);\n  }\n\n  async createProduct(productData: InsertProduct): Promise<Product> {\n    const [product] = await db.insert(products).values({\n      ...productData,\n      updatedAt: new Date(),\n    }).returning();\n    return product;\n  }\n\n  async updateProduct(id: string, productData: Partial<InsertProduct>): Promise<Product> {\n    const [product] = await db\n      .update(products)\n      .set({\n        ...productData,\n        updatedAt: new Date(),\n      })\n      .where(eq(products.id, id))\n      .returning();\n    return product;\n  }\n\n  async deleteProduct(id: string): Promise<void> {\n    await db.delete(products).where(eq(products.id, id));\n  }\n\n  // Order operations\n  async getOrder(id: string): Promise<Order | undefined> {\n    const [order] = await db.select().from(orders).where(eq(orders.id, id));\n    return order || undefined;\n  }\n\n  async getUserOrders(userId: string): Promise<Order[]> {\n    return await db\n      .select()\n      .from(orders)\n      .where(eq(orders.userId, userId))\n      .orderBy(desc(orders.createdAt));\n  }\n\n  async getAllOrders(): Promise<Order[]> {\n    return await db.select().from(orders).orderBy(desc(orders.createdAt));\n  }\n\n  async createOrder(orderData: InsertOrder): Promise<Order> {\n    const [order] = await db.insert(orders).values(orderData).returning();\n    return order;\n  }\n\n  async updateOrderStatus(id: string, status: string): Promise<Order> {\n    const [order] = await db\n      .update(orders)\n      .set({ status })\n      .where(eq(orders.id, id))\n      .returning();\n    return order;\n  }\n\n  // Order items operations\n  async getOrderItems(orderId: string): Promise<OrderItem[]> {\n    return await db\n      .select()\n      .from(orderItems)\n      .where(eq(orderItems.orderId, orderId));\n  }\n\n  async createOrderItem(orderItemData: InsertOrderItem): Promise<OrderItem> {\n    const [orderItem] = await db.insert(orderItems).values(orderItemData).returning();\n    return orderItem;\n  }\n\n  // Review operations\n  async getProductReviews(productId: string): Promise<Review[]> {\n    return await db\n      .select()\n      .from(reviews)\n      .where(eq(reviews.productId, productId))\n      .orderBy(desc(reviews.createdAt));\n  }\n\n  async createReview(reviewData: InsertReview): Promise<Review> {\n    const [review] = await db.insert(reviews).values(reviewData).returning();\n    await this.updateProductRating(reviewData.productId);\n    return review;\n  }\n\n  async updateProductRating(productId: string): Promise<void> {\n    const [result] = await db\n      .select({\n        averageRating: sql<number>`AVG(${reviews.rating})`,\n      })\n      .from(reviews)\n      .where(eq(reviews.productId, productId));\n\n    await db\n      .update(products)\n      .set({ averageRating: result.averageRating?.toString() || \"0\" })\n      .where(eq(products.id, productId));\n  }\n\n  // Wishlist operations\n  async getUserWishlist(userId: string): Promise<Wishlist[]> {\n    return await db\n      .select()\n      .from(wishlists)\n      .where(eq(wishlists.userId, userId));\n  }\n\n  async addToWishlist(wishlistData: InsertWishlist): Promise<Wishlist> {\n    const [wishlist] = await db.insert(wishlists).values(wishlistData).returning();\n    return wishlist;\n  }\n\n  async removeFromWishlist(userId: string, productId: string): Promise<void> {\n    await db\n      .delete(wishlists)\n      .where(and(eq(wishlists.userId, userId), eq(wishlists.productId, productId)));\n  }\n\n  // Admin activity log\n  async logAdminActivity(logData: InsertAdminActivityLog): Promise<AdminActivityLog> {\n    const [log] = await db.insert(adminActivityLog).values(logData).returning();\n    return log;\n  }\n\n  async getAdminActivityLog(): Promise<AdminActivityLog[]> {\n    return await db\n      .select()\n      .from(adminActivityLog)\n      .orderBy(desc(adminActivityLog.timestamp))\n      .limit(100);\n  }\n\n  // Reports\n  async getRevenueStats(): Promise<{ totalRevenue: number; totalOrders: number; }> {\n    const [result] = await db\n      .select({\n        totalRevenue: sql<number>`COALESCE(SUM(${orders.total}), 0)`,\n        totalOrders: count(orders.id),\n      })\n      .from(orders)\n      .where(eq(orders.status, \"delivered\"));\n\n    return {\n      totalRevenue: Number(result.totalRevenue) || 0,\n      totalOrders: result.totalOrders || 0,\n    };\n  }\n\n  async getTopProducts(): Promise<Array<{ productName: string; totalSold: number; }>> {\n    const result = await db\n      .select({\n        productName: products.name,\n        totalSold: sql<number>`SUM(${orderItems.quantity})`,\n      })\n      .from(orderItems)\n      .innerJoin(products, eq(orderItems.productId, products.id))\n      .innerJoin(orders, eq(orderItems.orderId, orders.id))\n      .where(eq(orders.status, \"delivered\"))\n      .groupBy(products.id, products.name)\n      .orderBy(desc(sql`SUM(${orderItems.quantity})`))\n      .limit(10);\n\n    return result.map(item => ({\n      productName: item.productName,\n      totalSold: Number(item.totalSold) || 0,\n    }));\n  }\n\n  // Image operations\n  async createImage(image: InsertImage): Promise<Image> {\n    const [newImage] = await db.insert(images).values(image).returning();\n    return newImage;\n  }\n\n  async getImage(id: string): Promise<Image | undefined> {\n    const [image] = await db.select().from(images).where(eq(images.id, id));\n    return image;\n  }\n\n  async deleteImage(id: string): Promise<void> {\n    await db.delete(images).where(eq(images.id, id));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":10157},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, decimal, timestamp, boolean, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\", { length: 255 }).notNull().unique(),\n  passwordHash: text(\"password_hash\").notNull(),\n  adminRole: varchar(\"admin_role\", { length: 50 }).notNull().default(\"none\"), // 'none', 'standard_admin', 'main_admin'\n  securityKey: varchar(\"security_key\", { length: 255 }).unique(),\n  firstName: varchar(\"first_name\", { length: 100 }),\n  lastName: varchar(\"last_name\", { length: 100 }),\n  phone: varchar(\"phone\", { length: 20 }),\n  address: text(\"address\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Products table\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  imageUrl: text(\"image_url\"),\n  stock: integer(\"stock\").notNull().default(0),\n  category: varchar(\"category\", { length: 100 }).notNull(),\n  brand: varchar(\"brand\", { length: 100 }),\n  averageRating: decimal(\"average_rating\", { precision: 3, scale: 2 }).default(\"0\"),\n  featured: boolean(\"featured\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Orders table\nexport const orders = pgTable(\"orders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  customerName: varchar(\"customer_name\", { length: 255 }).notNull(),\n  deliveryAddress: text(\"delivery_address\").notNull(),\n  contactNumber: varchar(\"contact_number\", { length: 20 }).notNull(),\n  total: decimal(\"total\", { precision: 10, scale: 2 }).notNull(),\n  status: varchar(\"status\", { length: 50 }).notNull().default(\"pending\"), // 'pending', 'processing', 'shipped', 'delivered', 'cancelled'\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Order items table\nexport const orderItems = pgTable(\"order_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orderId: varchar(\"order_id\").references(() => orders.id).notNull(),\n  productId: varchar(\"product_id\").references(() => products.id).notNull(),\n  quantity: integer(\"quantity\").notNull(),\n  priceAtTimeOfOrder: decimal(\"price_at_time_of_order\", { precision: 10, scale: 2 }).notNull(),\n});\n\n// Reviews table\nexport const reviews = pgTable(\"reviews\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  productId: varchar(\"product_id\").references(() => products.id).notNull(),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  rating: integer(\"rating\").notNull(), // 1-5\n  comment: text(\"comment\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Wishlists table\nexport const wishlists = pgTable(\"wishlists\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  productId: varchar(\"product_id\").references(() => products.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Images table for storing uploaded images\nexport const images = pgTable(\"images\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  filename: varchar(\"filename\", { length: 255 }).notNull(),\n  mimeType: varchar(\"mime_type\", { length: 100 }).notNull(),\n  data: text(\"data\").notNull(), // Base64 encoded image data\n  size: integer(\"size\").notNull(), // File size in bytes\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Admin activity log table\nexport const adminActivityLog = pgTable(\"admin_activity_log\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  adminId: varchar(\"admin_id\").references(() => users.id).notNull(),\n  actionType: varchar(\"action_type\", { length: 100 }).notNull(),\n  actionDetails: jsonb(\"action_details\"),\n  timestamp: timestamp(\"timestamp\").defaultNow().notNull(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  orders: many(orders),\n  reviews: many(reviews),\n  wishlists: many(wishlists),\n  adminLogs: many(adminActivityLog),\n}));\n\nexport const productsRelations = relations(products, ({ many }) => ({\n  orderItems: many(orderItems),\n  reviews: many(reviews),\n  wishlists: many(wishlists),\n}));\n\nexport const ordersRelations = relations(orders, ({ one, many }) => ({\n  user: one(users, {\n    fields: [orders.userId],\n    references: [users.id],\n  }),\n  items: many(orderItems),\n}));\n\nexport const orderItemsRelations = relations(orderItems, ({ one }) => ({\n  order: one(orders, {\n    fields: [orderItems.orderId],\n    references: [orders.id],\n  }),\n  product: one(products, {\n    fields: [orderItems.productId],\n    references: [products.id],\n  }),\n}));\n\nexport const reviewsRelations = relations(reviews, ({ one }) => ({\n  product: one(products, {\n    fields: [reviews.productId],\n    references: [products.id],\n  }),\n  user: one(users, {\n    fields: [reviews.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const wishlistsRelations = relations(wishlists, ({ one }) => ({\n  user: one(users, {\n    fields: [wishlists.userId],\n    references: [users.id],\n  }),\n  product: one(products, {\n    fields: [wishlists.productId],\n    references: [products.id],\n  }),\n}));\n\nexport const adminActivityLogRelations = relations(adminActivityLog, ({ one }) => ({\n  admin: one(users, {\n    fields: [adminActivityLog.adminId],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  averageRating: true,\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertOrderItemSchema = createInsertSchema(orderItems).omit({\n  id: true,\n});\n\nexport const insertReviewSchema = createInsertSchema(reviews).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertWishlistSchema = createInsertSchema(wishlists).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertImageSchema = createInsertSchema(images).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAdminActivityLogSchema = createInsertSchema(adminActivityLog).omit({\n  id: true,\n  timestamp: true,\n});\n\n// Types\nexport type Image = typeof images.$inferSelect;\nexport type InsertImage = z.infer<typeof insertImageSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Product = typeof products.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type Order = typeof orders.$inferSelect;\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\nexport type OrderItem = typeof orderItems.$inferSelect;\nexport type InsertOrderItem = z.infer<typeof insertOrderItemSchema>;\nexport type Review = typeof reviews.$inferSelect;\nexport type InsertReview = z.infer<typeof insertReviewSchema>;\nexport type Wishlist = typeof wishlists.$inferSelect;\nexport type InsertWishlist = z.infer<typeof insertWishlistSchema>;\nexport type AdminActivityLog = typeof adminActivityLog.$inferSelect;\nexport type InsertAdminActivityLog = z.infer<typeof insertAdminActivityLogSchema>;\n","size_bytes":7689},"client/public/sw.js":{"content":"const CACHE_NAME = 'pc-today-v1';\nconst urlsToCache = [\n  '/',\n  '/products',\n  '/cart',\n  '/manifest.json',\n  'https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap',\n  'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css'\n];\n\n// Install event - cache resources\nself.addEventListener('install', (event) => {\n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then((cache) => {\n        console.log('Opened cache');\n        return cache.addAll(urlsToCache);\n      })\n      .catch((error) => {\n        console.log('Cache install failed:', error);\n      })\n  );\n});\n\n// Fetch event - serve from cache, fallback to network\nself.addEventListener('fetch', (event) => {\n  event.respondWith(\n    caches.match(event.request)\n      .then((response) => {\n        // Return cached version or fetch from network\n        if (response) {\n          return response;\n        }\n        return fetch(event.request);\n      })\n      .catch(() => {\n        // Return offline page for navigation requests\n        if (event.request.destination === 'document') {\n          return caches.match('/');\n        }\n      })\n  );\n});\n\n// Activate event - cleanup old caches\nself.addEventListener('activate', (event) => {\n  const cacheWhitelist = [CACHE_NAME];\n  \n  event.waitUntil(\n    caches.keys().then((cacheNames) => {\n      return Promise.all(\n        cacheNames.map((cacheName) => {\n          if (cacheWhitelist.indexOf(cacheName) === -1) {\n            return caches.delete(cacheName);\n          }\n        })\n      );\n    })\n  );\n});\n\n// Background sync for offline form submissions\nself.addEventListener('sync', (event) => {\n  if (event.tag === 'order-sync') {\n    event.waitUntil(syncOrders());\n  }\n});\n\nasync function syncOrders() {\n  // Handle offline order submissions when back online\n  try {\n    const cache = await caches.open(CACHE_NAME + '-orders');\n    const requests = await cache.keys();\n    \n    for (const request of requests) {\n      try {\n        const response = await fetch(request);\n        if (response.ok) {\n          await cache.delete(request);\n        }\n      } catch (error) {\n        console.log('Failed to sync order:', error);\n      }\n    }\n  } catch (error) {\n    console.log('Sync failed:', error);\n  }\n}\n\n// Push notification handler\nself.addEventListener('push', (event) => {\n  const options = {\n    body: event.data ? event.data.text() : 'New update from PC Worx!',\n    icon: '/manifest-icon-192.png',\n    badge: '/manifest-icon-192.png',\n    data: {\n      url: '/'\n    }\n  };\n\n  event.waitUntil(\n    self.registration.showNotification('PC Worx', options)\n  );\n});\n\n// Notification click handler\nself.addEventListener('notificationclick', (event) => {\n  event.notification.close();\n  \n  event.waitUntil(\n    clients.openWindow(event.notification.data.url || '/')\n  );\n});\n","size_bytes":2832},"client/src/App.tsx":{"content":"import React from 'react';\nimport { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/contexts/AuthContext\";\nimport { CartProvider } from \"@/contexts/CartContext\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/Home\";\nimport Products from \"@/pages/Products\";\nimport ProductDetails from \"@/pages/ProductDetails\";\nimport Cart from \"@/pages/Cart\";\nimport Checkout from \"@/pages/Checkout\";\nimport UserDashboard from \"@/pages/UserDashboard\";\nimport Login from \"@/pages/Login\";\nimport Register from \"@/pages/Register\";\nimport AdminLogin from \"@/pages/AdminLogin\";\nimport AdminDashboard from \"@/pages/AdminDashboard\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/products\" component={Products} />\n      <Route path=\"/products/:id\" component={ProductDetails} />\n      <Route path=\"/cart\" component={Cart} />\n      <Route path=\"/checkout\" component={Checkout} />\n      <Route path=\"/dashboard\" component={UserDashboard} />\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/register\" component={Register} />\n      <Route path=\"/admin/login\" component={AdminLogin} />\n      <Route path=\"/admin\" component={AdminDashboard} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <CartProvider>\n          <TooltipProvider>\n            <Toaster />\n            <Router />\n          </TooltipProvider>\n        </CartProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1831},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(222.2 84% 4.9%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(222.2 84% 4.9%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(222.2 84% 4.9%);\n  --primary: hsl(221.2 83.2% 53.3%);\n  --primary-foreground: hsl(210 40% 98%);\n  --secondary: hsl(24.6 95% 53.1%);\n  --secondary-foreground: hsl(210 40% 98%);\n  --muted: hsl(210 40% 96%);\n  --muted-foreground: hsl(215.4 16.3% 46.9%);\n  --accent: hsl(158.1 64.4% 51.6%);\n  --accent-foreground: hsl(210 40% 98%);\n  --destructive: hsl(0 84.2% 60.2%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --border: hsl(214.3 31.8% 91.4%);\n  --input: hsl(214.3 31.8% 91.4%);\n  --ring: hsl(221.2 83.2% 53.3%);\n  --chart-1: hsl(221.2 83.2% 53.3%);\n  --chart-2: hsl(158.1 64.4% 51.6%);\n  --chart-3: hsl(24.6 95% 53.1%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(221.2 83.2% 53.3%);\n  --sidebar-primary-foreground: hsl(210 40% 98%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(221.2 83.2% 53.3%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(221.2 83.2% 53.3%);\n  --font-sans: Inter, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(222.2 84% 4.9%);\n  --foreground: hsl(210 40% 98%);\n  --card: hsl(222.2 84% 4.9%);\n  --card-foreground: hsl(210 40% 98%);\n  --popover: hsl(222.2 84% 4.9%);\n  --popover-foreground: hsl(210 40% 98%);\n  --primary: hsl(217.2 91.2% 59.8%);\n  --primary-foreground: hsl(222.2 84% 4.9%);\n  --secondary: hsl(217.2 32.6% 17.5%);\n  --secondary-foreground: hsl(210 40% 98%);\n  --muted: hsl(217.2 32.6% 17.5%);\n  --muted-foreground: hsl(215 20.2% 65.1%);\n  --accent: hsl(217.2 32.6% 17.5%);\n  --accent-foreground: hsl(210 40% 98%);\n  --border: hsl(217.2 32.6% 17.5%);\n  --input: hsl(217.2 32.6% 17.5%);\n  --ring: hsl(224.3 76.3% 94.0%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n\n  .line-clamp-2 {\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n  }\n}\n\n/* PWA install prompt */\n.install-prompt {\n  @apply fixed bottom-4 left-4 right-4 md:left-auto md:right-4 md:w-80 bg-card border border-border rounded-lg p-4 shadow-lg z-50;\n}\n\n/* Loading animations */\n.pulse-slow {\n  animation: pulse 3s infinite;\n}\n\n/* Custom scrollbar */\n.custom-scrollbar {\n  scrollbar-width: thin;\n  scrollbar-color: hsl(var(--muted-foreground)) hsl(var(--muted));\n}\n\n.custom-scrollbar::-webkit-scrollbar {\n  width: 6px;\n}\n\n.custom-scrollbar::-webkit-scrollbar-track {\n  background: hsl(var(--muted));\n}\n\n.custom-scrollbar::-webkit-scrollbar-thumb {\n  background: hsl(var(--muted-foreground));\n  border-radius: 3px;\n}\n\n.custom-scrollbar::-webkit-scrollbar-thumb:hover {\n  background: hsl(var(--foreground));\n}\n","size_bytes":3241},"client/src/main.tsx":{"content":"import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":184},"client/src/components/AdminLayout.tsx":{"content":"import { ReactNode } from 'react';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { LogOut, User } from 'lucide-react';\n\ninterface AdminLayoutProps {\n  children: ReactNode;\n}\n\nexport default function AdminLayout({ children }: AdminLayoutProps) {\n  const { user, logout } = useAuth();\n\n  if (!user || (user.adminRole !== 'standard_admin' && user.adminRole !== 'main_admin')) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <Card className=\"w-full max-w-md mx-4\">\n          <CardContent className=\"pt-6 text-center\">\n            <h1 className=\"text-2xl font-bold text-destructive mb-4\">Access Denied</h1>\n            <p className=\"text-muted-foreground mb-4\">\n              You don't have permission to access the admin panel.\n            </p>\n            <Button onClick={() => window.location.href = '/'}>\n              Go to Home\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-muted/20\">\n      {/* Admin Header */}\n      <header className=\"bg-card border-b border-border sticky top-0 z-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"w-10 h-10 bg-gradient-to-br from-primary to-accent rounded-lg flex items-center justify-center\">\n                <i className=\"fas fa-desktop text-primary-foreground text-lg\"></i>\n              </div>\n              <div>\n                <h1 className=\"text-xl font-bold text-primary\">PC Worx Admin</h1>\n                <p className=\"text-xs text-muted-foreground\">Electronics Management</p>\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center\">\n                  <User className=\"h-4 w-4 text-primary\" />\n                </div>\n                <div className=\"hidden md:block\">\n                  <div className=\"text-sm font-medium\" data-testid=\"text-admin-role\">\n                    {user.adminRole === 'main_admin' ? 'Main Admin' : 'Standard Admin'}\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">{user.email}</div>\n                </div>\n              </div>\n              \n              <Button variant=\"outline\" size=\"sm\" onClick={logout} data-testid=\"button-admin-logout\">\n                <LogOut className=\"h-4 w-4 mr-2\" />\n                Logout\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {children}\n      </main>\n    </div>\n  );\n}\n","size_bytes":3019},"client/src/components/Footer.tsx":{"content":"export default function Footer() {\n  return (\n    <footer className=\"bg-foreground text-background py-12\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n          {/* Company Info */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-gradient-to-br from-primary to-accent rounded-lg flex items-center justify-center\">\n                <i className=\"fas fa-desktop text-primary-foreground text-lg\"></i>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-bold\">PC Worx</h3>\n                <p className=\"text-sm text-muted\">Electronics Kenya</p>\n              </div>\n            </div>\n            <p className=\"text-sm text-muted\">\n              Leading electronics shop in Nairobi. Trusted since 2020 for quality electronics, cash on delivery, and excellent customer service across Kenya.\n            </p>\n          </div>\n          \n          {/* Quick Links */}\n          <div>\n            <h4 className=\"font-semibold mb-4\">Quick Links</h4>\n            <ul className=\"space-y-2 text-sm\">\n              <li><a href=\"#\" className=\"text-muted hover:text-background\">About Us</a></li>\n              <li><a href=\"#\" className=\"text-muted hover:text-background\">Contact</a></li>\n              <li><a href=\"#\" className=\"text-muted hover:text-background\">Shipping Info</a></li>\n              <li><a href=\"#\" className=\"text-muted hover:text-background\">Returns</a></li>\n              <li><a href=\"#\" className=\"text-muted hover:text-background\">Warranty</a></li>\n            </ul>\n          </div>\n          \n          {/* Categories */}\n          <div>\n            <h4 className=\"font-semibold mb-4\">Categories</h4>\n            <ul className=\"space-y-2 text-sm\">\n              <li><a href=\"/products?category=smartphones\" className=\"text-muted hover:text-background\">Smartphones</a></li>\n              <li><a href=\"/products?category=laptops\" className=\"text-muted hover:text-background\">Laptops</a></li>\n              <li><a href=\"/products?category=tvs\" className=\"text-muted hover:text-background\">Smart TVs</a></li>\n              <li><a href=\"/products?category=gaming\" className=\"text-muted hover:text-background\">Gaming</a></li>\n              <li><a href=\"/products?category=appliances\" className=\"text-muted hover:text-background\">Home Appliances</a></li>\n            </ul>\n          </div>\n          \n          {/* Contact Info */}\n          <div>\n            <h4 className=\"font-semibold mb-4\">Contact Us</h4>\n            <div className=\"space-y-3 text-sm\">\n              <div className=\"flex items-center space-x-3\">\n                <i className=\"fas fa-map-marker-alt text-primary\"></i>\n                <span className=\"text-muted\">Krishna Center, Westlands, Nairobi</span>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <i className=\"fas fa-phone text-primary\"></i>\n                <span className=\"text-muted\">0717 888 333</span>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <i className=\"fas fa-envelope text-primary\"></i>\n                <span className=\"text-muted\">info@pcworx.ke</span>\n              </div>\n            </div>\n            \n            {/* Social Links */}\n            <div className=\"flex space-x-4 mt-4\">\n              <a href=\"#\" className=\"w-8 h-8 bg-primary/20 rounded-full flex items-center justify-center hover:bg-primary transition-colors\">\n                <i className=\"fab fa-facebook-f text-primary\"></i>\n              </a>\n              <a href=\"#\" className=\"w-8 h-8 bg-primary/20 rounded-full flex items-center justify-center hover:bg-primary transition-colors\">\n                <i className=\"fab fa-twitter text-primary\"></i>\n              </a>\n              <a href=\"#\" className=\"w-8 h-8 bg-primary/20 rounded-full flex items-center justify-center hover:bg-primary transition-colors\">\n                <i className=\"fab fa-instagram text-primary\"></i>\n              </a>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"border-t border-muted/20 mt-8 pt-8 text-center\">\n          <p className=\"text-sm text-muted\">\n            © 2024 PC Worx Kenya. All rights reserved. | \n            <a href=\"#\" className=\"text-primary hover:underline\">Privacy Policy</a> | \n            <a href=\"#\" className=\"text-primary hover:underline\">Terms of Service</a>\n          </p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":4596},"client/src/components/Header.tsx":{"content":"import React, { useState } from 'react';\nimport { Link, useLocation } from 'wouter';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useCart } from '@/contexts/CartContext';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { \n  Heart, \n  ShoppingCart, \n  Search, \n  Menu, \n  User,\n  LogOut,\n  Settings\n} from 'lucide-react';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\n\nexport default function Header() {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [location, setLocation] = useLocation();\n  const { user, logout } = useAuth();\n  const { getItemCount } = useCart();\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (searchQuery.trim()) {\n      setLocation(`/products?search=${encodeURIComponent(searchQuery.trim())}`);\n    }\n  };\n\n  return (\n    <header className=\"bg-white shadow-sm border-b border-border sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex items-center justify-between h-16\">\n          {/* Logo and Brand */}\n          <div className=\"flex items-center space-x-8\">\n            <Link href=\"/\" className=\"flex items-center space-x-3\" data-testid=\"link-home\">\n              <div className=\"w-10 h-10 bg-gradient-to-br from-primary to-accent rounded-lg flex items-center justify-center\">\n                <i className=\"fas fa-desktop text-primary-foreground text-lg\"></i>\n              </div>\n              <div>\n                <h1 className=\"text-xl font-bold text-primary\">PC Worx</h1>\n                <p className=\"text-xs text-muted-foreground\">Electronics Kenya</p>\n              </div>\n            </Link>\n            \n            {/* Navigation Links */}\n            <nav className=\"hidden md:flex space-x-6\">\n              <Link href=\"/products\" className=\"text-foreground hover:text-primary font-medium\" data-testid=\"link-products\">\n                Products\n              </Link>\n              <Link href=\"/products?category=smartphones\" className=\"text-muted-foreground hover:text-primary\" data-testid=\"link-smartphones\">\n                Smartphones\n              </Link>\n              <Link href=\"/products?category=laptops\" className=\"text-muted-foreground hover:text-primary\" data-testid=\"link-laptops\">\n                Laptops\n              </Link>\n              <Link href=\"/products?category=tvs\" className=\"text-muted-foreground hover:text-primary\" data-testid=\"link-tvs\">\n                Smart TVs\n              </Link>\n            </nav>\n          </div>\n          \n          {/* Search Bar */}\n          <div className=\"flex-1 max-w-lg mx-8 hidden md:block\">\n            <form onSubmit={handleSearch} className=\"relative\">\n              <Input\n                type=\"text\"\n                placeholder=\"Search electronics in Nairobi...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"w-full pl-10 pr-4\"\n                data-testid=\"input-search\"\n              />\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            </form>\n          </div>\n          \n          {/* User Actions */}\n          <div className=\"flex items-center space-x-4\">\n            {user && (\n              <Link href=\"/dashboard\">\n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\" \n                  className=\"relative\"\n                  data-testid=\"button-wishlist\"\n                >\n                  <Heart className=\"h-5 w-5\" />\n                  <Badge variant=\"secondary\" className=\"absolute -top-1 -right-1 h-5 w-5 p-0 flex items-center justify-center text-xs\">\n                    0\n                  </Badge>\n                </Button>\n              </Link>\n            )}\n            \n            <Link href=\"/cart\">\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                className=\"relative\"\n                data-testid=\"button-cart\"\n              >\n                <ShoppingCart className=\"h-5 w-5\" />\n                <Badge variant=\"default\" className=\"absolute -top-1 -right-1 h-5 w-5 p-0 flex items-center justify-center text-xs\">\n                  {getItemCount()}\n                </Badge>\n              </Button>\n            </Link>\n            \n            {user ? (\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-user-menu\">\n                    <User className=\"h-5 w-5\" />\n                    <span className=\"ml-2 hidden md:inline\">\n                      {user.firstName || user.email}\n                    </span>\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\">\n                  <DropdownMenuItem asChild>\n                    <Link href=\"/dashboard\" data-testid=\"link-dashboard\">\n                      <Settings className=\"mr-2 h-4 w-4\" />\n                      Dashboard\n                    </Link>\n                  </DropdownMenuItem>\n                  {(user.adminRole === 'standard_admin' || user.adminRole === 'main_admin') && (\n                    <DropdownMenuItem asChild>\n                      <Link href=\"/admin\" data-testid=\"link-admin\">\n                        <Settings className=\"mr-2 h-4 w-4\" />\n                        Admin Panel\n                      </Link>\n                    </DropdownMenuItem>\n                  )}\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem onClick={logout} data-testid=\"button-logout\">\n                    <LogOut className=\"mr-2 h-4 w-4\" />\n                    Logout\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            ) : (\n              <div className=\"hidden md:flex space-x-2\">\n                <Link href=\"/login\">\n                  <Button variant=\"outline\" data-testid=\"button-login\">\n                    Login\n                  </Button>\n                </Link>\n                <Link href=\"/register\">\n                  <Button data-testid=\"button-register\">\n                    Sign Up\n                  </Button>\n                </Link>\n              </div>\n            )}\n            \n            <Button variant=\"ghost\" size=\"sm\" className=\"md:hidden\" data-testid=\"button-mobile-menu\">\n              <Menu className=\"h-5 w-5\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":6745},"client/src/components/ProductCard.tsx":{"content":"import React from 'react';\nimport { Link } from 'wouter';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useCart } from '@/contexts/CartContext';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Heart, Star, ShoppingCart } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\n// Helper function to normalize image URLs\nconst normalizeImageUrl = (imageUrl: string | null | undefined): string | null => {\n  if (!imageUrl) return null;\n  \n  // Fix malformed object storage URLs\n  if (imageUrl.startsWith('https://public-objects/')) {\n    return imageUrl.replace('https://public-objects/', '/public-objects/');\n  }\n  \n  // Return as-is for valid URLs\n  return imageUrl;\n};\n\ninterface Product {\n  id: string;\n  name: string;\n  description?: string;\n  price: string;\n  imageUrl?: string;\n  stock: number;\n  category: string;\n  brand?: string;\n  averageRating?: string;\n  featured?: boolean;\n}\n\ninterface ProductCardProps {\n  product: Product;\n}\n\nexport default function ProductCard({ product }: ProductCardProps) {\n  const { user } = useAuth();\n  const { addToCart } = useCart();\n  const { toast } = useToast();\n\n  const handleAddToCart = () => {\n    if (product.stock <= 0) {\n      toast({\n        title: \"Out of Stock\",\n        description: \"This product is currently out of stock.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    addToCart(product);\n    toast({\n      title: \"Added to Cart\",\n      description: `${product.name} has been added to your cart.`,\n    });\n  };\n\n  const formatPrice = (price: string) => {\n    return `KSh ${Number(price).toLocaleString()}`;\n  };\n\n  const renderStars = (rating: string) => {\n    const numRating = Number(rating) || 0;\n    const stars = [];\n    for (let i = 1; i <= 5; i++) {\n      stars.push(\n        <Star\n          key={i}\n          className={`h-4 w-4 ${i <= numRating ? 'text-secondary fill-current' : 'text-gray-300'}`}\n        />\n      );\n    }\n    return stars;\n  };\n\n  return (\n    <div className=\"bg-card border border-border rounded-lg overflow-hidden hover:shadow-lg transition-shadow\" data-testid={`card-product-${product.id}`}>\n      <div className=\"relative\">\n        <img\n          src={normalizeImageUrl(product.imageUrl) || 'https://images.unsplash.com/photo-1505740420928-5e560c06d30e?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300'}\n          alt={product.name}\n          className=\"w-full h-48 object-cover\"\n          data-testid={`img-product-${product.id}`}\n          onError={(e) => {\n            e.currentTarget.src = 'https://images.unsplash.com/photo-1505740420928-5e560c06d30e?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300';\n          }}\n        />\n        {product.featured && (\n          <Badge className=\"absolute top-2 left-2 bg-secondary text-secondary-foreground\">\n            Featured\n          </Badge>\n        )}\n      </div>\n      \n      <div className=\"p-4 space-y-3\">\n        <div className=\"flex items-start justify-between\">\n          <h4 className=\"font-semibold text-card-foreground line-clamp-2\" data-testid={`text-product-name-${product.id}`}>\n            {product.name}\n          </h4>\n          {user && (\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              className=\"text-muted-foreground hover:text-destructive p-1\"\n              data-testid={`button-wishlist-${product.id}`}\n            >\n              <Heart className=\"h-4 w-4\" />\n            </Button>\n          )}\n        </div>\n        \n        {product.averageRating && Number(product.averageRating) > 0 && (\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"flex\">\n              {renderStars(product.averageRating)}\n            </div>\n            <span className=\"text-sm text-muted-foreground\" data-testid={`text-rating-${product.id}`}>\n              ({Number(product.averageRating).toFixed(1)})\n            </span>\n          </div>\n        )}\n        \n        <div className=\"space-y-2\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-2xl font-bold text-primary\" data-testid={`text-price-${product.id}`}>\n              {formatPrice(product.price)}\n            </span>\n            <Badge \n              variant={product.stock > 0 ? \"default\" : \"destructive\"}\n              data-testid={`badge-stock-${product.id}`}\n            >\n              {product.stock > 0 ? `${product.stock} in stock` : 'Out of Stock'}\n            </Badge>\n          </div>\n        </div>\n        \n        <div className=\"space-y-2\">\n          <Button\n            onClick={handleAddToCart}\n            disabled={product.stock <= 0}\n            className=\"w-full\"\n            data-testid={`button-add-to-cart-${product.id}`}\n          >\n            <ShoppingCart className=\"mr-2 h-4 w-4\" />\n            Add to Cart\n          </Button>\n          <Link href={`/products/${product.id}`}>\n            <Button variant=\"outline\" className=\"w-full\" data-testid={`button-view-details-${product.id}`}>\n              View Details\n            </Button>\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5156},"client/src/contexts/AuthContext.tsx":{"content":"import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface User {\n  id: string;\n  email: string;\n  firstName?: string;\n  lastName?: string;\n  adminRole: string;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  token: string | null;\n  login: (email: string, password: string) => Promise<void>;\n  register: (email: string, password: string, firstName: string, lastName: string) => Promise<void>;\n  logout: () => void;\n  isLoading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType>({\n  user: null,\n  token: null,\n  login: async () => {},\n  register: async () => {},\n  logout: () => {},\n  isLoading: true,\n});\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [token, setToken] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    try {\n      const savedToken = localStorage.getItem('token');\n      const savedUser = localStorage.getItem('user');\n      \n      if (savedToken && savedUser) {\n        setToken(savedToken);\n        setUser(JSON.parse(savedUser));\n      }\n    } catch (error) {\n      console.error('Error loading auth data:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  const login = async (email: string, password: string) => {\n    try {\n      const response = await apiRequest('POST', '/api/login', { email, password });\n      const data = await response.json();\n      \n      setToken(data.token);\n      setUser(data.user);\n      localStorage.setItem('token', data.token);\n      localStorage.setItem('user', JSON.stringify(data.user));\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  };\n\n  const register = async (email: string, password: string, firstName: string, lastName: string) => {\n    try {\n      await apiRequest('POST', '/api/register', { \n        email, \n        passwordHash: password, \n        firstName, \n        lastName \n      });\n    } catch (error) {\n      console.error('Register error:', error);\n      throw error;\n    }\n  };\n\n  const logout = () => {\n    setUser(null);\n    setToken(null);\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  };\n\n  const value: AuthContextType = {\n    user,\n    token,\n    login,\n    register,\n    logout,\n    isLoading,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth(): AuthContextType {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}","size_bytes":2739},"client/src/contexts/CartContext.tsx":{"content":"import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\n\ninterface CartItem {\n  productId: string;\n  name: string;\n  price: string;\n  imageUrl: string;\n  quantity: number;\n  stock: number;\n}\n\ninterface CartContextType {\n  items: CartItem[];\n  addToCart: (product: any, quantity?: number) => void;\n  removeFromCart: (productId: string) => void;\n  updateQuantity: (productId: string, quantity: number) => void;\n  clearCart: () => void;\n  getTotal: () => number;\n  getItemCount: () => number;\n}\n\nconst CartContext = createContext<CartContextType | undefined>(undefined);\n\nexport function CartProvider({ children }: { children: ReactNode }) {\n  const [items, setItems] = useState<CartItem[]>([]);\n\n  useEffect(() => {\n    const savedCart = localStorage.getItem('cart');\n    if (savedCart) {\n      setItems(JSON.parse(savedCart));\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('cart', JSON.stringify(items));\n  }, [items]);\n\n  const addToCart = (product: any, quantity = 1) => {\n    setItems(prevItems => {\n      const existingItem = prevItems.find(item => item.productId === product.id);\n      \n      if (existingItem) {\n        return prevItems.map(item =>\n          item.productId === product.id\n            ? { ...item, quantity: Math.min(item.quantity + quantity, item.stock) }\n            : item\n        );\n      } else {\n        return [...prevItems, {\n          productId: product.id,\n          name: product.name,\n          price: product.price,\n          imageUrl: product.imageUrl,\n          quantity: Math.min(quantity, product.stock),\n          stock: product.stock\n        }];\n      }\n    });\n  };\n\n  const removeFromCart = (productId: string) => {\n    setItems(prevItems => prevItems.filter(item => item.productId !== productId));\n  };\n\n  const updateQuantity = (productId: string, quantity: number) => {\n    if (quantity <= 0) {\n      removeFromCart(productId);\n      return;\n    }\n\n    setItems(prevItems =>\n      prevItems.map(item =>\n        item.productId === productId\n          ? { ...item, quantity: Math.min(quantity, item.stock) }\n          : item\n      )\n    );\n  };\n\n  const clearCart = () => {\n    setItems([]);\n  };\n\n  const getTotal = () => {\n    return items.reduce((total, item) => total + (Number(item.price) * item.quantity), 0);\n  };\n\n  const getItemCount = () => {\n    return items.reduce((count, item) => count + item.quantity, 0);\n  };\n\n  return (\n    <CartContext.Provider value={{\n      items,\n      addToCart,\n      removeFromCart,\n      updateQuantity,\n      clearCart,\n      getTotal,\n      getItemCount\n    }}>\n      {children}\n    </CartContext.Provider>\n  );\n}\n\nexport function useCart() {\n  const context = useContext(CartContext);\n  if (context === undefined) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  return context;\n}\n","size_bytes":2846},"client/src/hooks/use-mobile.tsx":{"content":"import React, { useState, useEffect } from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = useState<boolean | undefined>(undefined)\n\n  useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":573},"client/src/hooks/use-toast.ts":{"content":"import React, { useReducer, useEffect } from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3917},"client/src/hooks/useAuth.tsx":{"content":"import { createContext, useContext, ReactNode } from 'react';\nimport { useAuth as useAuthContext } from '@/contexts/AuthContext';\n\n// Re-export the auth context as a hook for consistency\nexport function useAuth() {\n  return useAuthContext();\n}\n\n// This file exists for consistency with the directory structure\n// The actual implementation is in @/contexts/AuthContext\n","size_bytes":368},"client/src/hooks/useCart.tsx":{"content":"import { createContext, useContext, ReactNode } from 'react';\nimport { useCart as useCartContext } from '@/contexts/CartContext';\n\n// Re-export the cart context as a hook for consistency\nexport function useCart() {\n  return useCartContext();\n}\n\n// This file exists for consistency with the directory structure\n// The actual implementation is in @/contexts/CartContext\n","size_bytes":368},"client/src/lib/api.ts":{"content":"import { apiRequest } from './queryClient';\n\nconst API_BASE = '/api';\n\nexport const api = {\n  // Auth\n  login: (email: string, password: string) =>\n    apiRequest('POST', `${API_BASE}/login`, { email, password }),\n  \n  adminLogin: (email: string, password: string, securityKey: string) =>\n    apiRequest('POST', `${API_BASE}/admin/login`, { email, password, securityKey }),\n  \n  register: (email: string, password: string, firstName: string, lastName: string) =>\n    apiRequest('POST', `${API_BASE}/register`, { email, passwordHash: password, firstName, lastName }),\n\n  // Products\n  getProducts: (params?: { search?: string; category?: string; sort?: string }) => {\n    const searchParams = new URLSearchParams();\n    if (params?.search) searchParams.append('search', params.search);\n    if (params?.category) searchParams.append('category', params.category);\n    if (params?.sort) searchParams.append('sort', params.sort);\n    return fetch(`${API_BASE}/products?${searchParams}`);\n  },\n\n  getFeaturedProducts: () => fetch(`${API_BASE}/products/featured`),\n  \n  getProduct: (id: string) => fetch(`${API_BASE}/products/${id}`),\n\n  // Orders\n  createOrder: (orderData: any, token: string) =>\n    fetch(`${API_BASE}/orders`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify(orderData)\n    }),\n\n  getUserOrders: (userId: string, token: string) =>\n    fetch(`${API_BASE}/users/${userId}/orders`, {\n      headers: { 'Authorization': `Bearer ${token}` }\n    }),\n\n  // Reviews\n  getProductReviews: (productId: string) =>\n    fetch(`${API_BASE}/products/${productId}/reviews`),\n\n  createReview: (productId: string, review: any, token: string) =>\n    fetch(`${API_BASE}/products/${productId}/reviews`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify(review)\n    }),\n\n  // Wishlist\n  getUserWishlist: (userId: string, token: string) =>\n    fetch(`${API_BASE}/users/${userId}/wishlist`, {\n      headers: { 'Authorization': `Bearer ${token}` }\n    }),\n\n  addToWishlist: (productId: string, token: string) =>\n    fetch(`${API_BASE}/wishlist`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify({ productId })\n    }),\n\n  removeFromWishlist: (productId: string, token: string) =>\n    fetch(`${API_BASE}/wishlist/${productId}`, {\n      method: 'DELETE',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    }),\n\n  // Admin\n  getAllOrders: (token: string) =>\n    fetch(`${API_BASE}/orders/all`, {\n      headers: { 'Authorization': `Bearer ${token}` }\n    }),\n\n  updateOrderStatus: (orderId: string, status: string, token: string) =>\n    fetch(`${API_BASE}/orders/${orderId}/status`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify({ status })\n    }),\n\n  createProduct: (product: any, token: string) =>\n    fetch(`${API_BASE}/products`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify(product)\n    }),\n\n  updateProduct: (id: string, product: any, token: string) =>\n    fetch(`${API_BASE}/products/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify(product)\n    }),\n\n  deleteProduct: (id: string, token: string) =>\n    fetch(`${API_BASE}/products/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    }),\n\n  // Main admin only\n  getAllUsers: (token: string) =>\n    fetch(`${API_BASE}/users/all`, {\n      headers: { 'Authorization': `Bearer ${token}` }\n    }),\n\n  deleteUser: (id: string, token: string) =>\n    fetch(`${API_BASE}/users/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    }),\n\n  updateUserRole: (id: string, adminRole: string, token: string) =>\n    fetch(`${API_BASE}/users/${id}/role`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify({ adminRole })\n    }),\n\n  createStandardAdmin: (email: string, password: string, token: string) =>\n    fetch(`${API_BASE}/admin/create-standard-admin`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify({ email, password })\n    }),\n\n  getRevenueStats: (token: string) =>\n    fetch(`${API_BASE}/reports/revenue`, {\n      headers: { 'Authorization': `Bearer ${token}` }\n    }),\n\n  getTopProducts: (token: string) =>\n    fetch(`${API_BASE}/reports/top-products`, {\n      headers: { 'Authorization': `Bearer ${token}` }\n    }),\n\n  downloadProducts: (token: string) =>\n    fetch(`${API_BASE}/reports/products/download`, {\n      headers: { 'Authorization': `Bearer ${token}` }\n    }),\n\n  getAdminActivityLog: (token: string) =>\n    fetch(`${API_BASE}/admin/activity-log`, {\n      headers: { 'Authorization': `Bearer ${token}` }\n    }),\n};\n","size_bytes":5412},"client/src/lib/auth.ts":{"content":"import { apiRequest } from './queryClient';\n\nexport interface LoginCredentials {\n  email: string;\n  password: string;\n}\n\nexport interface AdminLoginCredentials extends LoginCredentials {\n  securityKey: string;\n}\n\nexport interface RegisterData {\n  email: string;\n  password: string;\n  firstName: string;\n  lastName: string;\n}\n\nexport interface User {\n  id: string;\n  email: string;\n  firstName?: string;\n  lastName?: string;\n  adminRole: string;\n  createdAt?: string;\n}\n\nexport interface AuthResponse {\n  token: string;\n  user: User;\n}\n\n// Authentication utility functions\nexport const auth = {\n  async login(credentials: LoginCredentials): Promise<AuthResponse> {\n    const response = await apiRequest('POST', '/api/login', credentials);\n    return await response.json();\n  },\n\n  async adminLogin(credentials: AdminLoginCredentials): Promise<AuthResponse> {\n    const response = await apiRequest('POST', '/api/admin/login', credentials);\n    return await response.json();\n  },\n\n  async register(data: RegisterData): Promise<void> {\n    await apiRequest('POST', '/api/register', {\n      ...data,\n      passwordHash: data.password\n    });\n  },\n\n  getToken(): string | null {\n    return localStorage.getItem('token');\n  },\n\n  getUser(): User | null {\n    const userStr = localStorage.getItem('user');\n    return userStr ? JSON.parse(userStr) : null;\n  },\n\n  setAuth(token: string, user: User): void {\n    localStorage.setItem('token', token);\n    localStorage.setItem('user', JSON.stringify(user));\n  },\n\n  clearAuth(): void {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  },\n\n  isAuthenticated(): boolean {\n    return !!this.getToken() && !!this.getUser();\n  },\n\n  isAdmin(): boolean {\n    const user = this.getUser();\n    return user?.adminRole === 'standard_admin' || user?.adminRole === 'main_admin';\n  },\n\n  isMainAdmin(): boolean {\n    const user = this.getUser();\n    return user?.adminRole === 'main_admin';\n  }\n};\n\n// JWT token utilities\nexport const tokenUtils = {\n  isExpired(token: string): boolean {\n    try {\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      return Date.now() >= payload.exp * 1000;\n    } catch {\n      return true;\n    }\n  },\n\n  getPayload(token: string): any {\n    try {\n      return JSON.parse(atob(token.split('.')[1]));\n    } catch {\n      return null;\n    }\n  }\n};\n\n// Error handling for authentication\nexport class AuthError extends Error {\n  constructor(message: string, public code?: string) {\n    super(message);\n    this.name = 'AuthError';\n  }\n}\n\nexport const authErrors = {\n  INVALID_CREDENTIALS: 'Invalid email or password',\n  INVALID_SECURITY_KEY: 'Invalid security key',\n  TOKEN_EXPIRED: 'Session expired, please log in again',\n  ACCESS_DENIED: 'Access denied',\n  USER_NOT_FOUND: 'User not found',\n  EMAIL_EXISTS: 'An account with this email already exists'\n};\n","size_bytes":2853},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const headers: Record<string, string> = {};\n  \n  if (data) {\n    headers[\"Content-Type\"] = \"application/json\";\n  }\n  \n  // Include Authorization header if token exists\n  const token = localStorage.getItem('token');\n  if (token) {\n    headers[\"Authorization\"] = `Bearer ${token}`;\n  }\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const headers: Record<string, string> = {};\n    \n    // Include Authorization header if token exists\n    const token = localStorage.getItem('token');\n    if (token) {\n      headers[\"Authorization\"] = `Bearer ${token}`;\n    }\n\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      headers,\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1863},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/AdminDashboard.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useAuth } from '@/contexts/AuthContext';\nimport AdminLayout from '@/components/AdminLayout';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '@/components/ui/alert-dialog';\nimport { \n  BarChart3, \n  Package, \n  ShoppingBag, \n  Users, \n  FileText, \n  Activity,\n  Plus,\n  Edit,\n  Trash2,\n  Eye,\n  Download\n} from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\n\nexport default function AdminDashboard() {\n  const { user, token } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [activeTab, setActiveTab] = useState('dashboard');\n  const [isProductDialogOpen, setIsProductDialogOpen] = useState(false);\n  const [editingProduct, setEditingProduct] = useState<any>(null);\n  const [isAdminDialogOpen, setIsAdminDialogOpen] = useState(false);\n\n  // Product form state\n  const [productForm, setProductForm] = useState({\n    name: '',\n    description: '',\n    price: '',\n    imageUrl: '',\n    stock: '',\n    category: '',\n    brand: '',\n    featured: false\n  });\n\n  // Admin form state\n  const [adminForm, setAdminForm] = useState({\n    email: '',\n    password: ''\n  });\n\n  useEffect(() => {\n    document.title = 'Admin Dashboard - PC Worx Kenya';\n  }, []);\n\n  // Queries\n  const { data: stats } = useQuery({\n    queryKey: ['/api/reports/revenue'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/reports/revenue');\n      return await response.json();\n    },\n    enabled: !!token && user?.adminRole === 'main_admin'\n  });\n\n  const { data: products } = useQuery({\n    queryKey: ['/api/products'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/products');\n      return await response.json();\n    }\n  });\n\n  const { data: orders } = useQuery({\n    queryKey: ['/api/orders/all'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/orders/all');\n      return await response.json();\n    },\n    enabled: !!token\n  });\n\n  const { data: allUsers } = useQuery({\n    queryKey: ['/api/users/all'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/users/all');\n      return await response.json();\n    },\n    enabled: !!token && user?.adminRole === 'main_admin'\n  });\n\n  const { data: topProducts } = useQuery({\n    queryKey: ['/api/reports/top-products'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/reports/top-products');\n      return await response.json();\n    },\n    enabled: !!token && user?.adminRole === 'main_admin'\n  });\n\n  const { data: activityLog } = useQuery({\n    queryKey: ['/api/admin/activity-log'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/admin/activity-log');\n      return await response.json();\n    },\n    enabled: !!token && user?.adminRole === 'main_admin'\n  });\n\n  // Mutations\n  const createProductMutation = useMutation({\n    mutationFn: async (productData: any) => {\n      await apiRequest('POST', '/api/products', productData);\n    },\n    onSuccess: () => {\n      toast({ title: \"Product created successfully\" });\n      queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n      setIsProductDialogOpen(false);\n      resetProductForm();\n    },\n    onError: () => {\n      toast({ title: \"Failed to create product\", variant: \"destructive\" });\n    }\n  });\n\n  const updateProductMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      await apiRequest('PUT', `/api/products/${id}`, data);\n    },\n    onSuccess: () => {\n      toast({ title: \"Product updated successfully\" });\n      queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n      setIsProductDialogOpen(false);\n      resetProductForm();\n    },\n    onError: () => {\n      toast({ title: \"Failed to update product\", variant: \"destructive\" });\n    }\n  });\n\n  const deleteProductMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest('DELETE', `/api/products/${id}`);\n    },\n    onSuccess: () => {\n      toast({ title: \"Product deleted successfully\" });\n      queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n    },\n    onError: () => {\n      toast({ title: \"Failed to delete product\", variant: \"destructive\" });\n    }\n  });\n\n  const updateOrderStatusMutation = useMutation({\n    mutationFn: async ({ orderId, status }: { orderId: string; status: string }) => {\n      await apiRequest('PUT', `/api/orders/${orderId}/status`, { status });\n    },\n    onSuccess: () => {\n      toast({ title: \"Order status updated\" });\n      queryClient.invalidateQueries({ queryKey: ['/api/orders/all'] });\n    },\n    onError: () => {\n      toast({ title: \"Failed to update order status\", variant: \"destructive\" });\n    }\n  });\n\n  const createAdminMutation = useMutation({\n    mutationFn: async (adminData: any) => {\n      await apiRequest('POST', '/api/admin/create-standard-admin', { email: adminData.email, password: adminData.password });\n    },\n    onSuccess: () => {\n      toast({ title: \"Admin created successfully\" });\n      queryClient.invalidateQueries({ queryKey: ['/api/users/all'] });\n      setIsAdminDialogOpen(false);\n      setAdminForm({ email: '', password: '' });\n    },\n    onError: () => {\n      toast({ title: \"Failed to create admin\", variant: \"destructive\" });\n    }\n  });\n\n  const deleteUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      await apiRequest('DELETE', `/api/users/${userId}`);\n    },\n    onSuccess: () => {\n      toast({ title: \"User deleted successfully\" });\n      queryClient.invalidateQueries({ queryKey: ['/api/users/all'] });\n    },\n    onError: () => {\n      toast({ title: \"Failed to delete user\", variant: \"destructive\" });\n    }\n  });\n\n  // Helper functions\n  const resetProductForm = () => {\n    setProductForm({\n      name: '',\n      description: '',\n      price: '',\n      imageUrl: '',\n      stock: '',\n      category: '',\n      brand: '',\n      featured: false\n    });\n    setEditingProduct(null);\n  };\n\n  const handleEditProduct = (product: any) => {\n    setEditingProduct(product);\n    setProductForm({\n      name: product.name || '',\n      description: product.description || '',\n      price: product.price || '',\n      imageUrl: product.imageUrl || '',\n      stock: product.stock?.toString() || '',\n      category: product.category || '',\n      brand: product.brand || '',\n      featured: product.featured || false\n    });\n    setIsProductDialogOpen(true);\n  };\n\n  const handleProductSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const productData = {\n      ...productForm,\n      price: productForm.price,\n      stock: parseInt(productForm.stock) || 0\n    };\n\n    if (editingProduct) {\n      updateProductMutation.mutate({ id: editingProduct.id, data: productData });\n    } else {\n      createProductMutation.mutate(productData);\n    }\n  };\n\n  const handleAdminSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    createAdminMutation.mutate(adminForm);\n  };\n\n  const formatPrice = (price: string) => {\n    return `KSh ${Number(price).toLocaleString()}`;\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pending': return 'bg-yellow-100 text-yellow-800';\n      case 'processing': return 'bg-blue-100 text-blue-800';\n      case 'shipped': return 'bg-purple-100 text-purple-800';\n      case 'delivered': return 'bg-green-100 text-green-800';\n      case 'cancelled': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const downloadProducts = async () => {\n    try {\n      const response = await apiRequest('GET', '/api/products');\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.style.display = 'none';\n      a.href = url;\n      a.download = 'products.json';\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      toast({ title: \"Products downloaded successfully\" });\n    } catch (error) {\n      toast({ title: \"Failed to download products\", variant: \"destructive\" });\n    }\n  };\n\n  return (\n    <AdminLayout>\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-6\">\n          <TabsTrigger value=\"dashboard\" className=\"flex items-center space-x-2\" data-testid=\"tab-admin-dashboard\">\n            <BarChart3 className=\"h-4 w-4\" />\n            <span>Dashboard</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"products\" className=\"flex items-center space-x-2\" data-testid=\"tab-admin-products\">\n            <Package className=\"h-4 w-4\" />\n            <span>Products</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"orders\" className=\"flex items-center space-x-2\" data-testid=\"tab-admin-orders\">\n            <ShoppingBag className=\"h-4 w-4\" />\n            <span>Orders</span>\n          </TabsTrigger>\n          {user?.adminRole === 'main_admin' && (\n            <>\n              <TabsTrigger value=\"users\" className=\"flex items-center space-x-2\" data-testid=\"tab-admin-users\">\n                <Users className=\"h-4 w-4\" />\n                <span>Users</span>\n              </TabsTrigger>\n              <TabsTrigger value=\"reports\" className=\"flex items-center space-x-2\" data-testid=\"tab-admin-reports\">\n                <FileText className=\"h-4 w-4\" />\n                <span>Reports</span>\n              </TabsTrigger>\n              <TabsTrigger value=\"activity\" className=\"flex items-center space-x-2\" data-testid=\"tab-admin-activity\">\n                <Activity className=\"h-4 w-4\" />\n                <span>Activity</span>\n              </TabsTrigger>\n            </>\n          )}\n        </TabsList>\n\n        {/* Dashboard Tab */}\n        <TabsContent value=\"dashboard\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Total Revenue</p>\n                    <p className=\"text-2xl font-bold text-primary\" data-testid=\"text-total-revenue\">\n                      {stats ? formatPrice(stats.totalRevenue.toString()) : 'Loading...'}\n                    </p>\n                  </div>\n                  <BarChart3 className=\"h-8 w-8 text-primary\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Total Orders</p>\n                    <p className=\"text-2xl font-bold text-accent\" data-testid=\"text-total-orders\">\n                      {stats?.totalOrders || orders?.length || 0}\n                    </p>\n                  </div>\n                  <ShoppingBag className=\"h-8 w-8 text-accent\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Total Products</p>\n                    <p className=\"text-2xl font-bold text-secondary\" data-testid=\"text-total-products\">\n                      {products?.length || 0}\n                    </p>\n                  </div>\n                  <Package className=\"h-8 w-8 text-secondary\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Total Users</p>\n                    <p className=\"text-2xl font-bold text-destructive\" data-testid=\"text-total-users\">\n                      {allUsers?.length || 0}\n                    </p>\n                  </div>\n                  <Users className=\"h-8 w-8 text-destructive\" />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"grid lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Recent Orders</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {orders?.slice(0, 5).map((order: any) => (\n                    <div key={order.id} className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\">\n                      <div>\n                        <p className=\"font-medium\">#{order.id.slice(-8).toUpperCase()}</p>\n                        <p className=\"text-sm text-muted-foreground\">{order.customerName}</p>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"font-medium\">{formatPrice(order.total)}</p>\n                        <Badge className={getStatusColor(order.status)}>\n                          {order.status}\n                        </Badge>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Low Stock Alert</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {products?.filter((product: any) => product.stock < 10).slice(0, 5).map((product: any) => (\n                    <div key={product.id} className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\">\n                      <div>\n                        <p className=\"font-medium\">{product.name}</p>\n                        <p className=\"text-sm text-muted-foreground\">{product.category}</p>\n                      </div>\n                      <Badge variant=\"destructive\">\n                        {product.stock} left\n                      </Badge>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* Products Tab */}\n        <TabsContent value=\"products\" className=\"space-y-6\">\n          <div className=\"flex justify-between items-center\">\n            <h2 className=\"text-2xl font-bold\">Product Management</h2>\n            \n            <Dialog open={isProductDialogOpen} onOpenChange={setIsProductDialogOpen}>\n              <DialogTrigger asChild>\n                <Button onClick={resetProductForm} data-testid=\"button-add-product\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Product\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-2xl\">\n                <DialogHeader>\n                  <DialogTitle>\n                    {editingProduct ? 'Edit Product' : 'Add New Product'}\n                  </DialogTitle>\n                </DialogHeader>\n                <form onSubmit={handleProductSubmit} className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"name\">Product Name</Label>\n                      <Input\n                        id=\"name\"\n                        value={productForm.name}\n                        onChange={(e) => setProductForm({...productForm, name: e.target.value})}\n                        required\n                        data-testid=\"input-product-name\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"brand\">Brand</Label>\n                      <Input\n                        id=\"brand\"\n                        value={productForm.brand}\n                        onChange={(e) => setProductForm({...productForm, brand: e.target.value})}\n                        data-testid=\"input-product-brand\"\n                      />\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"description\">Description</Label>\n                    <Textarea\n                      id=\"description\"\n                      value={productForm.description}\n                      onChange={(e) => setProductForm({...productForm, description: e.target.value})}\n                      rows={3}\n                      data-testid=\"textarea-product-description\"\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-3 gap-4\">\n                    <div>\n                      <Label htmlFor=\"price\">Price (KSh)</Label>\n                      <Input\n                        id=\"price\"\n                        type=\"number\"\n                        value={productForm.price}\n                        onChange={(e) => setProductForm({...productForm, price: e.target.value})}\n                        required\n                        data-testid=\"input-product-price\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"stock\">Stock</Label>\n                      <Input\n                        id=\"stock\"\n                        type=\"number\"\n                        value={productForm.stock}\n                        onChange={(e) => setProductForm({...productForm, stock: e.target.value})}\n                        required\n                        data-testid=\"input-product-stock\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"category\">Category</Label>\n                      <Select value={productForm.category} onValueChange={(value) => setProductForm({...productForm, category: value})}>\n                        <SelectTrigger data-testid=\"select-product-category\">\n                          <SelectValue placeholder=\"Select category\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"smartphones\">Smartphones</SelectItem>\n                          <SelectItem value=\"laptops\">Laptops</SelectItem>\n                          <SelectItem value=\"tvs\">Smart TVs</SelectItem>\n                          <SelectItem value=\"gaming\">Gaming</SelectItem>\n                          <SelectItem value=\"appliances\">Home Appliances</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-3\">\n                    <Label>Product Image</Label>\n                    <div className=\"border border-dashed border-gray-300 rounded-lg p-4 text-center\">\n                      <input\n                        type=\"file\"\n                        accept=\"image/*\"\n                        onChange={async (e) => {\n                          const file = e.target.files?.[0];\n                          if (!file) return;\n\n                          if (file.size > 5242880) { // 5MB limit\n                            toast({ title: \"File too large\", description: \"Please select an image under 5MB\", variant: \"destructive\" });\n                            return;\n                          }\n\n                          // Convert file to base64\n                          const reader = new FileReader();\n                          reader.onload = async (event) => {\n                            try {\n                              const response = await apiRequest('POST', '/api/images/upload', {\n                                filename: file.name,\n                                mimeType: file.type,\n                                data: event.target?.result as string,\n                              });\n                              const data = await response.json();\n                              setProductForm({...productForm, imageUrl: data.url});\n                              toast({ title: \"Image uploaded successfully\", description: \"Your product image has been saved to database.\" });\n                            } catch (error) {\n                              toast({ title: \"Failed to upload image\", variant: \"destructive\" });\n                            }\n                          };\n                          reader.readAsDataURL(file);\n                        }}\n                        className=\"w-full cursor-pointer\"\n                        data-testid=\"input-product-image-upload\"\n                      />\n                      <p className=\"text-sm text-muted-foreground mt-2\">\n                        📁 Click to upload product image (max 5MB)\n                      </p>\n                      {productForm.imageUrl && (\n                        <div className=\"mt-3\">\n                          <img \n                            src={productForm.imageUrl.startsWith('/') ? `${window.location.origin}${productForm.imageUrl}` : productForm.imageUrl}\n                            alt=\"Product preview\" \n                            className=\"max-w-32 max-h-32 object-cover rounded border mx-auto\"\n                            onError={(e) => {\n                              e.currentTarget.style.display = 'none';\n                            }}\n                          />\n                        </div>\n                      )}\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center space-x-2\">\n                    <input\n                      type=\"checkbox\"\n                      id=\"featured\"\n                      checked={productForm.featured}\n                      onChange={(e) => setProductForm({...productForm, featured: e.target.checked})}\n                      data-testid=\"checkbox-product-featured\"\n                    />\n                    <Label htmlFor=\"featured\">Featured Product</Label>\n                  </div>\n\n                  <div className=\"flex justify-end space-x-2 pt-4\">\n                    <Button type=\"button\" variant=\"outline\" onClick={() => setIsProductDialogOpen(false)}>\n                      Cancel\n                    </Button>\n                    <Button type=\"submit\" disabled={createProductMutation.isPending || updateProductMutation.isPending}>\n                      {editingProduct ? 'Update Product' : 'Add Product'}\n                    </Button>\n                  </div>\n                </form>\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          <Card>\n            <CardContent className=\"p-0\">\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead className=\"bg-muted/50\">\n                    <tr>\n                      <th className=\"text-left p-4 font-medium\">Product</th>\n                      <th className=\"text-left p-4 font-medium\">Category</th>\n                      <th className=\"text-left p-4 font-medium\">Price</th>\n                      <th className=\"text-left p-4 font-medium\">Stock</th>\n                      <th className=\"text-left p-4 font-medium\">Status</th>\n                      <th className=\"text-left p-4 font-medium\">Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {products?.map((product: any) => (\n                      <tr key={product.id} className=\"border-t border-border\">\n                        <td className=\"p-4\">\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"w-10 h-10 bg-muted rounded-lg flex items-center justify-center\">\n                              <Package className=\"h-5 w-5 text-muted-foreground\" />\n                            </div>\n                            <div>\n                              <p className=\"font-medium\">{product.name}</p>\n                              <p className=\"text-sm text-muted-foreground\">{product.brand}</p>\n                            </div>\n                          </div>\n                        </td>\n                        <td className=\"p-4\">{product.category}</td>\n                        <td className=\"p-4\">{formatPrice(product.price)}</td>\n                        <td className=\"p-4\">{product.stock}</td>\n                        <td className=\"p-4\">\n                          <Badge variant={product.stock > 0 ? \"default\" : \"destructive\"}>\n                            {product.stock > 0 ? 'In Stock' : 'Out of Stock'}\n                          </Badge>\n                        </td>\n                        <td className=\"p-4\">\n                          <div className=\"flex space-x-2\">\n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\"\n                              onClick={() => handleEditProduct(product)}\n                              data-testid={`button-edit-product-${product.id}`}\n                            >\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                            <AlertDialog>\n                              <AlertDialogTrigger asChild>\n                                <Button variant=\"ghost\" size=\"sm\" data-testid={`button-delete-product-${product.id}`}>\n                                  <Trash2 className=\"h-4 w-4 text-destructive\" />\n                                </Button>\n                              </AlertDialogTrigger>\n                              <AlertDialogContent>\n                                <AlertDialogHeader>\n                                  <AlertDialogTitle>Delete Product</AlertDialogTitle>\n                                  <AlertDialogDescription>\n                                    Are you sure you want to delete \"{product.name}\"? This action cannot be undone.\n                                  </AlertDialogDescription>\n                                </AlertDialogHeader>\n                                <AlertDialogFooter>\n                                  <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                  <AlertDialogAction onClick={() => deleteProductMutation.mutate(product.id)}>\n                                    Delete\n                                  </AlertDialogAction>\n                                </AlertDialogFooter>\n                              </AlertDialogContent>\n                            </AlertDialog>\n                          </div>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Orders Tab */}\n        <TabsContent value=\"orders\" className=\"space-y-6\">\n          <div className=\"flex justify-between items-center\">\n            <h2 className=\"text-2xl font-bold\">Order Management</h2>\n          </div>\n\n          <Card>\n            <CardContent className=\"p-0\">\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead className=\"bg-muted/50\">\n                    <tr>\n                      <th className=\"text-left p-4 font-medium\">Order ID</th>\n                      <th className=\"text-left p-4 font-medium\">Customer Info</th>\n                      <th className=\"text-left p-4 font-medium\">Delivery Address</th>\n                      <th className=\"text-left p-4 font-medium\">Total</th>\n                      <th className=\"text-left p-4 font-medium\">Status</th>\n                      <th className=\"text-left p-4 font-medium\">Date</th>\n                      <th className=\"text-left p-4 font-medium\">Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {orders?.map((order: any) => (\n                      <tr key={order.id} className=\"border-t border-border\">\n                        <td className=\"p-4 font-mono\">#{order.id.slice(-8).toUpperCase()}</td>\n                        <td className=\"p-4\">\n                          <div>\n                            <p className=\"font-medium\">{order.customerName}</p>\n                            <p className=\"text-sm text-muted-foreground\">{order.contactNumber}</p>\n                          </div>\n                        </td>\n                        <td className=\"p-4\">\n                          <div className=\"text-sm\">\n                            <p className=\"text-muted-foreground\">{order.deliveryAddress}</p>\n                          </div>\n                        </td>\n                        <td className=\"p-4\">{formatPrice(order.total)}</td>\n                        <td className=\"p-4\">\n                          <Select \n                            value={order.status} \n                            onValueChange={(status) => updateOrderStatusMutation.mutate({ orderId: order.id, status })}\n                          >\n                            <SelectTrigger className=\"w-32\" data-testid={`select-order-status-${order.id}`}>\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"pending\">Pending</SelectItem>\n                              <SelectItem value=\"processing\">Processing</SelectItem>\n                              <SelectItem value=\"shipped\">Shipped</SelectItem>\n                              <SelectItem value=\"delivered\">Delivered</SelectItem>\n                              <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </td>\n                        <td className=\"p-4\">{new Date(order.createdAt).toLocaleDateString()}</td>\n                        <td className=\"p-4\">\n                          <Button variant=\"ghost\" size=\"sm\" data-testid={`button-view-order-${order.id}`}>\n                            <Eye className=\"h-4 w-4\" />\n                          </Button>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Users Tab (Main Admin Only) */}\n        {user?.adminRole === 'main_admin' && (\n          <TabsContent value=\"users\" className=\"space-y-6\">\n            <div className=\"flex justify-between items-center\">\n              <h2 className=\"text-2xl font-bold\">User Management</h2>\n              \n              <Dialog open={isAdminDialogOpen} onOpenChange={setIsAdminDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button data-testid=\"button-create-admin\">\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Create Admin\n                  </Button>\n                </DialogTrigger>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Create Standard Admin</DialogTitle>\n                  </DialogHeader>\n                  <form onSubmit={handleAdminSubmit} className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"adminEmail\">Email</Label>\n                      <Input\n                        id=\"adminEmail\"\n                        type=\"email\"\n                        value={adminForm.email}\n                        onChange={(e) => setAdminForm({...adminForm, email: e.target.value})}\n                        required\n                        data-testid=\"input-admin-form-email\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"adminPassword\">Password</Label>\n                      <Input\n                        id=\"adminPassword\"\n                        type=\"password\"\n                        value={adminForm.password}\n                        onChange={(e) => setAdminForm({...adminForm, password: e.target.value})}\n                        required\n                        data-testid=\"input-admin-form-password\"\n                      />\n                    </div>\n                    \n                    <div className=\"flex justify-end space-x-2 pt-4\">\n                      <Button type=\"button\" variant=\"outline\" onClick={() => setIsAdminDialogOpen(false)}>\n                        Cancel\n                      </Button>\n                      <Button type=\"submit\" disabled={createAdminMutation.isPending}>\n                        Create Admin\n                      </Button>\n                    </div>\n                  </form>\n                </DialogContent>\n              </Dialog>\n            </div>\n\n            <Card>\n              <CardContent className=\"p-0\">\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead className=\"bg-muted/50\">\n                      <tr>\n                        <th className=\"text-left p-4 font-medium\">User</th>\n                        <th className=\"text-left p-4 font-medium\">Role</th>\n                        <th className=\"text-left p-4 font-medium\">Status</th>\n                        <th className=\"text-left p-4 font-medium\">Joined</th>\n                        <th className=\"text-left p-4 font-medium\">Actions</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {allUsers?.map((userData: any) => (\n                        <tr key={userData.id} className=\"border-t border-border\">\n                          <td className=\"p-4\">\n                            <div>\n                              <p className=\"font-medium\">{userData.firstName} {userData.lastName}</p>\n                              <p className=\"text-sm text-muted-foreground\">{userData.email}</p>\n                            </div>\n                          </td>\n                          <td className=\"p-4\">\n                            <Badge variant={\n                              userData.adminRole === 'main_admin' ? 'destructive' : \n                              userData.adminRole === 'standard_admin' ? 'secondary' : 'default'\n                            }>\n                              {userData.adminRole === 'main_admin' ? 'Main Admin' :\n                               userData.adminRole === 'standard_admin' ? 'Standard Admin' : 'Customer'}\n                            </Badge>\n                          </td>\n                          <td className=\"p-4\">\n                            <Badge variant=\"default\">Active</Badge>\n                          </td>\n                          <td className=\"p-4\">{new Date(userData.createdAt).toLocaleDateString()}</td>\n                          <td className=\"p-4\">\n                            {(userData.adminRole === 'none' || userData.adminRole === 'standard_admin') && (\n                              <AlertDialog>\n                                <AlertDialogTrigger asChild>\n                                  <Button variant=\"ghost\" size=\"sm\" data-testid={`button-delete-user-${userData.id}`}>\n                                    <Trash2 className=\"h-4 w-4 text-destructive\" />\n                                  </Button>\n                                </AlertDialogTrigger>\n                                <AlertDialogContent>\n                                  <AlertDialogHeader>\n                                    <AlertDialogTitle>Delete {userData.adminRole === 'standard_admin' ? 'Admin' : 'User'}</AlertDialogTitle>\n                                    <AlertDialogDescription>\n                                      Are you sure you want to delete this {userData.adminRole === 'standard_admin' ? 'admin' : 'user'}? This action cannot be undone.\n                                    </AlertDialogDescription>\n                                  </AlertDialogHeader>\n                                  <AlertDialogFooter>\n                                    <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                    <AlertDialogAction onClick={() => deleteUserMutation.mutate(userData.id)}>\n                                      Delete\n                                    </AlertDialogAction>\n                                  </AlertDialogFooter>\n                                </AlertDialogContent>\n                              </AlertDialog>\n                            )}\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        )}\n\n        {/* Reports Tab (Main Admin Only) */}\n        {user?.adminRole === 'main_admin' && (\n          <TabsContent value=\"reports\" className=\"space-y-6\">\n            <h2 className=\"text-2xl font-bold\">Reports & Analytics</h2>\n\n            <div className=\"grid lg:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Revenue Report</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex justify-between\">\n                    <span>Total Revenue:</span>\n                    <span className=\"font-bold text-primary\" data-testid=\"text-revenue-total\">\n                      {stats ? formatPrice(stats.totalRevenue.toString()) : 'Loading...'}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Total Orders:</span>\n                    <span className=\"font-bold\" data-testid=\"text-orders-total\">\n                      {stats?.totalOrders || 0}\n                    </span>\n                  </div>\n                  <div className=\"pt-4 border-t border-border\">\n                    <Button onClick={downloadProducts} className=\"w-full\" data-testid=\"button-download-products\">\n                      <Download className=\"h-4 w-4 mr-2\" />\n                      Download Products (JSON)\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Top Products</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    {topProducts?.map((product: any, index: number) => (\n                      <div key={index} className=\"flex justify-between\">\n                        <span className=\"text-sm\">{product.productName}</span>\n                        <span className=\"font-bold text-sm\">{product.totalSold} sold</span>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        )}\n\n        {/* Activity Tab (Main Admin Only) */}\n        {user?.adminRole === 'main_admin' && (\n          <TabsContent value=\"activity\" className=\"space-y-6\">\n            <h2 className=\"text-2xl font-bold\">Admin Activity Log</h2>\n\n            <Card>\n              <CardContent className=\"p-0\">\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead className=\"bg-muted/50\">\n                      <tr>\n                        <th className=\"text-left p-4 font-medium\">Admin</th>\n                        <th className=\"text-left p-4 font-medium\">Action</th>\n                        <th className=\"text-left p-4 font-medium\">Details</th>\n                        <th className=\"text-left p-4 font-medium\">Timestamp</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {activityLog?.map((log: any) => (\n                        <tr key={log.id} className=\"border-t border-border\">\n                          <td className=\"p-4\">Admin</td>\n                          <td className=\"p-4\">\n                            <Badge variant=\"outline\">{log.actionType}</Badge>\n                          </td>\n                          <td className=\"p-4 text-sm text-muted-foreground\">\n                            {JSON.stringify(log.actionDetails)}\n                          </td>\n                          <td className=\"p-4\">{new Date(log.timestamp).toLocaleString()}</td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        )}\n      </Tabs>\n    </AdminLayout>\n  );\n}\n","size_bytes":41543},"client/src/pages/AdminLogin.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Link, useLocation } from 'wouter';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Eye, EyeOff, Shield } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\nexport default function AdminLogin() {\n  const [, setLocation] = useLocation();\n  const { user } = useAuth();\n  const { toast } = useToast();\n\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [securityKey, setSecurityKey] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const [showSecurityKey, setShowSecurityKey] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    // Redirect to regular login since admin login is removed\n    setLocation('/login');\n  }, [setLocation]);\n\n\n  return null; // Redirecting to login\n}\n","size_bytes":1107},"client/src/pages/Cart.tsx":{"content":"import { useEffect } from 'react';\nimport { Link } from 'wouter';\nimport { useCart } from '@/contexts/CartContext';\nimport { useAuth } from '@/contexts/AuthContext';\nimport Header from '@/components/Header';\nimport Footer from '@/components/Footer';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Minus, Plus, Trash2, ShoppingBag } from 'lucide-react';\n\n// Helper function to normalize image URLs\nconst normalizeImageUrl = (imageUrl: string | null | undefined): string | null => {\n  if (!imageUrl) return null;\n  \n  // Fix malformed object storage URLs\n  if (imageUrl.startsWith('https://public-objects/')) {\n    return imageUrl.replace('https://public-objects/', '/public-objects/');\n  }\n  \n  // Return as-is for valid URLs\n  return imageUrl;\n};\n\nexport default function Cart() {\n  const { items, updateQuantity, removeFromCart, getTotal, getItemCount } = useCart();\n  const { user } = useAuth();\n\n  useEffect(() => {\n    document.title = 'Shopping Cart | PC Worx Kenya';\n  }, []);\n\n  const formatPrice = (price: string) => {\n    return `KSh ${Number(price).toLocaleString()}`;\n  };\n\n  if (items.length === 0) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        \n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n          <Card className=\"max-w-md mx-auto text-center p-8\">\n            <ShoppingBag className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n            <h1 className=\"text-2xl font-bold mb-2\">Your cart is empty</h1>\n            <p className=\"text-muted-foreground mb-6\">\n              Looks like you haven't added any electronics to your cart yet.\n            </p>\n            <Link href=\"/products\">\n              <Button data-testid=\"button-shop-now\">Shop Now</Button>\n            </Link>\n          </Card>\n        </div>\n\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          {/* Cart Items */}\n          <div className=\"lg:col-span-2 space-y-4\">\n            <h1 className=\"text-3xl font-bold mb-6\" data-testid=\"text-cart-title\">\n              Shopping Cart ({getItemCount()} items)\n            </h1>\n\n            {items.map((item) => (\n              <Card key={item.productId}>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center space-x-4\">\n                    <img\n                      src={item.imageUrl || 'https://images.unsplash.com/photo-1505740420928-5e560c06d30e?ixlib=rb-4.0.3&auto=format&fit=crop&w=150&h=150'}\n                      alt={item.name}\n                      className=\"w-20 h-20 object-cover rounded-lg\"\n                      data-testid={`img-cart-item-${item.productId}`}\n                    />\n                    \n                    <div className=\"flex-1\">\n                      <h3 className=\"font-semibold text-lg\" data-testid={`text-cart-item-name-${item.productId}`}>\n                        {item.name}\n                      </h3>\n                      <p className=\"text-xl font-bold text-primary\" data-testid={`text-cart-item-price-${item.productId}`}>\n                        {formatPrice(item.price)}\n                      </p>\n                    </div>\n\n                    <div className=\"flex items-center space-x-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => updateQuantity(item.productId, item.quantity - 1)}\n                        disabled={item.quantity <= 1}\n                        data-testid={`button-decrease-${item.productId}`}\n                      >\n                        <Minus className=\"h-4 w-4\" />\n                      </Button>\n                      \n                      <Input\n                        type=\"number\"\n                        min=\"1\"\n                        max={item.stock}\n                        value={item.quantity}\n                        onChange={(e) => updateQuantity(item.productId, parseInt(e.target.value) || 1)}\n                        className=\"w-16 text-center\"\n                        data-testid={`input-quantity-${item.productId}`}\n                      />\n                      \n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => updateQuantity(item.productId, item.quantity + 1)}\n                        disabled={item.quantity >= item.stock}\n                        data-testid={`button-increase-${item.productId}`}\n                      >\n                        <Plus className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => removeFromCart(item.productId)}\n                      className=\"text-destructive hover:text-destructive\"\n                      data-testid={`button-remove-${item.productId}`}\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          {/* Order Summary */}\n          <div className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Order Summary</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex justify-between\">\n                  <span>Subtotal:</span>\n                  <span className=\"font-semibold\" data-testid=\"text-subtotal\">\n                    {formatPrice(getTotal().toString())}\n                  </span>\n                </div>\n                \n                <div className=\"flex justify-between\">\n                  <span>Delivery:</span>\n                  <span className=\"font-semibold text-accent\">Free</span>\n                </div>\n                \n                <div className=\"border-t pt-4\">\n                  <div className=\"flex justify-between text-lg font-bold\">\n                    <span>Total:</span>\n                    <span className=\"text-primary\" data-testid=\"text-total\">\n                      {formatPrice(getTotal().toString())}\n                    </span>\n                  </div>\n                </div>\n\n                {user ? (\n                  <Link href=\"/checkout\">\n                    <Button size=\"lg\" className=\"w-full\" data-testid=\"button-proceed-checkout\">\n                      Proceed to Checkout\n                    </Button>\n                  </Link>\n                ) : (\n                  <div className=\"space-y-2\">\n                    <Link href=\"/login\">\n                      <Button size=\"lg\" className=\"w-full\" data-testid=\"button-login-to-checkout\">\n                        Login to Checkout\n                      </Button>\n                    </Link>\n                    <p className=\"text-xs text-muted-foreground text-center\">\n                      New customer? <Link href=\"/register\" className=\"text-primary hover:underline\">Create account</Link>\n                    </p>\n                  </div>\n                )}\n\n                <div className=\"pt-4 space-y-2 text-xs text-muted-foreground\">\n                  <p>✓ Cash on Delivery available</p>\n                  <p>✓ 1 Year warranty included</p>\n                  <p>✓ Free delivery in Nairobi</p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":7826},"client/src/pages/Checkout.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { useMutation } from '@tanstack/react-query';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useCart } from '@/contexts/CartContext';\nimport Header from '@/components/Header';\nimport Footer from '@/components/Footer';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Separator } from '@/components/ui/separator';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\n\n// Helper function to normalize image URLs\nconst normalizeImageUrl = (imageUrl: string | null | undefined): string | null => {\n  if (!imageUrl) return null;\n  \n  // Fix malformed object storage URLs\n  if (imageUrl.startsWith('https://public-objects/')) {\n    return imageUrl.replace('https://public-objects/', '/public-objects/');\n  }\n  \n  // Return as-is for valid URLs\n  return imageUrl;\n};\n\nexport default function Checkout() {\n  const [, setLocation] = useLocation();\n  const { user, token } = useAuth();\n  const { items, clearCart, getTotal } = useCart();\n  const { toast } = useToast();\n\n  const [customerName, setCustomerName] = useState(user?.firstName && user?.lastName ? `${user.firstName} ${user.lastName}` : '');\n  const [contactNumber, setContactNumber] = useState('');\n  const [deliveryAddress, setDeliveryAddress] = useState('');\n\n  useEffect(() => {\n    document.title = 'Checkout - PC Worx Kenya';\n    \n    if (!user) {\n      setLocation('/login');\n      return;\n    }\n\n    if (items.length === 0) {\n      setLocation('/cart');\n      return;\n    }\n  }, [user, items, setLocation]);\n\n  const orderMutation = useMutation({\n    mutationFn: async () => {\n      const orderData = {\n        items: items.map(item => ({\n          productId: item.productId,\n          quantity: item.quantity\n        })),\n        customerName,\n        deliveryAddress,\n        contactNumber\n      };\n\n      await apiRequest('POST', '/api/orders', orderData);\n    },\n    onSuccess: () => {\n      clearCart();\n      toast({\n        title: \"Order Placed Successfully!\",\n        description: \"Your order has been placed. You will receive a confirmation call shortly.\",\n      });\n      setLocation('/dashboard');\n    },\n    onError: (error) => {\n      toast({\n        title: \"Order Failed\",\n        description: \"Failed to place order. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!customerName.trim() || !contactNumber.trim() || !deliveryAddress.trim()) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in all required fields.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    orderMutation.mutate();\n  };\n\n  const formatPrice = (price: string) => {\n    return `KSh ${Number(price).toLocaleString()}`;\n  };\n\n  if (!user || items.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"grid lg:grid-cols-2 gap-8\">\n          {/* Checkout Form */}\n          <div className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Delivery Information</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={handleSubmit} className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"customerName\">Full Name *</Label>\n                    <Input\n                      id=\"customerName\"\n                      type=\"text\"\n                      value={customerName}\n                      onChange={(e) => setCustomerName(e.target.value)}\n                      placeholder=\"Enter your full name\"\n                      required\n                      data-testid=\"input-customer-name\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"contactNumber\">Phone Number *</Label>\n                    <Input\n                      id=\"contactNumber\"\n                      type=\"tel\"\n                      value={contactNumber}\n                      onChange={(e) => setContactNumber(e.target.value)}\n                      placeholder=\"+254 712 345 678\"\n                      required\n                      data-testid=\"input-contact-number\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"deliveryAddress\">Delivery Address *</Label>\n                    <Textarea\n                      id=\"deliveryAddress\"\n                      value={deliveryAddress}\n                      onChange={(e) => setDeliveryAddress(e.target.value)}\n                      placeholder=\"Enter your full delivery address including building, floor, and any landmarks\"\n                      rows={4}\n                      required\n                      data-testid=\"textarea-delivery-address\"\n                    />\n                  </div>\n\n                  <div className=\"pt-4\">\n                    <Button\n                      type=\"submit\"\n                      size=\"lg\"\n                      className=\"w-full\"\n                      disabled={orderMutation.isPending}\n                      data-testid=\"button-place-order\"\n                    >\n                      {orderMutation.isPending ? 'Placing Order...' : 'Place Order (Cash on Delivery)'}\n                    </Button>\n                  </div>\n                </form>\n              </CardContent>\n            </Card>\n\n            {/* Payment Information */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Payment Method</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex items-center space-x-3 p-4 bg-accent/10 rounded-lg\">\n                  <i className=\"fas fa-money-bill-wave text-accent text-xl\"></i>\n                  <div>\n                    <div className=\"font-medium\">Cash on Delivery</div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      Pay when you receive your order\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"mt-4 space-y-2 text-sm text-muted-foreground\">\n                  <p>• Free delivery within Nairobi</p>\n                  <p>• You can inspect products before payment</p>\n                  <p>• Have exact change ready for smooth delivery</p>\n                  <p>• Our delivery team will call before arrival</p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Order Summary */}\n          <div className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Order Summary</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {/* Order Items */}\n                <div className=\"space-y-3\">\n                  {items.map((item) => (\n                    <div key={item.productId} className=\"flex items-center space-x-3\">\n                      <img\n                        src={item.imageUrl || 'https://images.unsplash.com/photo-1505740420928-5e560c06d30e?ixlib=rb-4.0.3&auto=format&fit=crop&w=80&h=80'}\n                        alt={item.name}\n                        className=\"w-12 h-12 object-cover rounded-lg\"\n                        data-testid={`img-checkout-item-${item.productId}`}\n                      />\n                      <div className=\"flex-1\">\n                        <div className=\"font-medium text-sm\" data-testid={`text-checkout-item-name-${item.productId}`}>\n                          {item.name}\n                        </div>\n                        <div className=\"text-xs text-muted-foreground\">\n                          Qty: {item.quantity}\n                        </div>\n                      </div>\n                      <div className=\"font-medium text-sm\" data-testid={`text-checkout-item-total-${item.productId}`}>\n                        {formatPrice((Number(item.price) * item.quantity).toString())}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n\n                <Separator />\n\n                {/* Order Totals */}\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span>Subtotal:</span>\n                    <span className=\"font-medium\" data-testid=\"text-checkout-subtotal\">\n                      {formatPrice(getTotal().toString())}\n                    </span>\n                  </div>\n                  \n                  <div className=\"flex justify-between\">\n                    <span>Delivery:</span>\n                    <span className=\"font-medium text-accent\">Free</span>\n                  </div>\n                  \n                  <Separator />\n                  \n                  <div className=\"flex justify-between text-lg font-bold\">\n                    <span>Total:</span>\n                    <span className=\"text-primary\" data-testid=\"text-checkout-total\">\n                      {formatPrice(getTotal().toString())}\n                    </span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Security Notice */}\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-start space-x-3\">\n                  <i className=\"fas fa-shield-alt text-accent text-lg mt-1\"></i>\n                  <div className=\"text-sm\">\n                    <div className=\"font-medium mb-1\">Secure Order</div>\n                    <div className=\"text-muted-foreground\">\n                      Your order is secure and will be processed immediately. \n                      Our delivery team will contact you to confirm delivery details.\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":10391},"client/src/pages/Home.tsx":{"content":"import React, { useEffect } from 'react';\nimport { Link } from 'wouter';\nimport { useQuery } from '@tanstack/react-query';\nimport Header from '@/components/Header';\nimport Footer from '@/components/Footer';\nimport ProductCard from '@/components/ProductCard';\nimport { Button } from '@/components/ui/button';\nimport { Card } from '@/components/ui/card';\nimport { apiRequest } from '@/lib/queryClient';\nimport type { Product } from '@shared/schema';\nimport { Smartphone, Laptop, Tv, Home as HomeIcon, Truck, CreditCard, Shield } from 'lucide-react';\n\nexport default function Home() {\n  useEffect(() => {\n    document.title = 'PC Worx - Electronics Shop Nairobi | Best Electronics Store Kenya';\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', 'PC Worx - Leading electronics shop in Nairobi. Best prices on smartphones, laptops, TVs & home appliances in Kenya. Cash on delivery available. Shop online electronics store Kenya.');\n    }\n  }, []);\n\n  const { data: featuredProducts, isLoading: isFeaturedLoading } = useQuery({\n    queryKey: ['/api/products/featured'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/products/featured');\n      return await response.json();\n    }\n  });\n\n  const categories = [\n    {\n      name: 'Smartphones',\n      icon: Smartphone,\n      description: 'iPhone, Samsung, Infinix',\n      link: '/products?category=smartphones'\n    },\n    {\n      name: 'Laptops',\n      icon: Laptop,\n      description: 'HP, Dell, Lenovo',\n      link: '/products?category=laptops'\n    },\n    {\n      name: 'Smart TVs',\n      icon: Tv,\n      description: 'LG, Samsung, Hisense',\n      link: '/products?category=tvs'\n    },\n    {\n      name: 'Home Appliances',\n      icon: HomeIcon,\n      description: 'Microwaves, Blenders',\n      link: '/products?category=appliances'\n    }\n  ];\n\n  const trustIndicators = [\n    {\n      icon: Truck,\n      title: 'Free Delivery Nairobi',\n      description: 'Free delivery within Nairobi for orders above KSh 10,000'\n    },\n    {\n      icon: CreditCard,\n      title: 'Cash on Delivery',\n      description: 'Pay when you receive your order. No upfront payment required.'\n    },\n    {\n      icon: Shield,\n      title: '1 Year Warranty',\n      description: 'All electronics come with manufacturer warranty and our support.'\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      {/* Hero Section */}\n      <section className=\"bg-gradient-to-r from-primary to-accent text-primary-foreground py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n            <div className=\"space-y-6\">\n              <h2 className=\"text-4xl lg:text-5xl font-bold leading-tight\">\n                Best Electronics Shop in Nairobi\n              </h2>\n              <p className=\"text-xl text-primary-foreground/90\">\n                Latest smartphones, laptops, TVs & home appliances. \n                Cash on delivery across Kenya. Trusted since 2020.\n              </p>\n              <div className=\"flex flex-col sm:flex-row gap-4\">\n                <Link href=\"/products\">\n                  <Button \n                    size=\"lg\" \n                    className=\"bg-secondary text-secondary-foreground hover:bg-secondary/90\"\n                    data-testid=\"button-shop-electronics\"\n                  >\n                    Shop Electronics\n                  </Button>\n                </Link>\n                <Link href=\"/products?featured=true\">\n                  <Button \n                    variant=\"outline\" \n                    size=\"lg\"\n                    className=\"border-primary-foreground text-primary-foreground hover:bg-white/10\"\n                    data-testid=\"button-view-deals\"\n                  >\n                    View Deals\n                  </Button>\n                </Link>\n              </div>\n              \n              {/* Trust Indicators */}\n              <div className=\"flex flex-col sm:flex-row sm:items-center sm:space-x-6 pt-4 space-y-2 sm:space-y-0\">\n                {trustIndicators.map((indicator, index) => (\n                  <div key={index} className=\"flex items-center space-x-2\">\n                    <indicator.icon className=\"h-5 w-5 text-secondary\" />\n                    <span className=\"text-sm\">{indicator.title}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n            \n            <div className=\"lg:text-right\">\n              <div className=\"relative\">\n                <img \n                  src=\"https://images.unsplash.com/photo-1511707171634-5f897ff02aa9?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=400\" \n                  alt=\"Latest smartphones and electronics available in Nairobi\" \n                  className=\"rounded-xl shadow-2xl w-full h-auto max-w-md ml-auto\"\n                  data-testid=\"img-hero\"\n                />\n                <div className=\"absolute -bottom-4 -left-4 bg-white text-foreground p-4 rounded-lg shadow-lg\">\n                  <div className=\"text-sm font-medium\">Starting from</div>\n                  <div className=\"text-2xl font-bold text-primary\">KSh 15,000</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Product Categories */}\n      <section className=\"py-16 bg-muted/20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h3 className=\"text-3xl font-bold text-foreground mb-4\">Shop by Category</h3>\n            <p className=\"text-muted-foreground max-w-2xl mx-auto\">\n              Browse our wide selection of electronics from trusted brands. All products with warranty and cash on delivery in Kenya.\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6\">\n            {categories.map((category, index) => (\n              <Link key={index} href={category.link}>\n                <Card className=\"p-6 hover:shadow-lg transition-shadow cursor-pointer\" data-testid={`card-category-${category.name.toLowerCase()}`}>\n                  <div className=\"text-center space-y-4\">\n                    <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto\">\n                      <category.icon className=\"h-8 w-8 text-primary\" />\n                    </div>\n                    <h4 className=\"font-semibold text-card-foreground\">{category.name}</h4>\n                    <p className=\"text-sm text-muted-foreground\">{category.description}</p>\n                  </div>\n                </Card>\n              </Link>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Featured Products */}\n      <section className=\"py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center mb-8\">\n            <div>\n              <h3 className=\"text-3xl font-bold text-foreground mb-2\">Featured Electronics</h3>\n              <p className=\"text-muted-foreground\">Best selling products in Nairobi</p>\n            </div>\n            <Link href=\"/products\">\n              <Button variant=\"ghost\" data-testid=\"button-view-all-products\">\n                View All Products\n              </Button>\n            </Link>\n          </div>\n          \n          {isFeaturedLoading ? (\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6\">\n              {[...Array(4)].map((_, i) => (\n                <Card key={i} className=\"p-4 space-y-4\">\n                  <div className=\"w-full h-48 bg-muted rounded-lg animate-pulse\"></div>\n                  <div className=\"space-y-2\">\n                    <div className=\"h-4 bg-muted rounded animate-pulse\"></div>\n                    <div className=\"h-4 bg-muted rounded w-2/3 animate-pulse\"></div>\n                  </div>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6\">\n              {featuredProducts?.map((product: any) => (\n                <ProductCard key={product.id} product={product} />\n              ))}\n            </div>\n          )}\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":8430},"client/src/pages/Login.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Link, useLocation } from 'wouter';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Eye, EyeOff } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const { login, user } = useAuth();\n  const { toast } = useToast();\n\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    document.title = 'Login - PC Worx Kenya';\n    \n    if (user) {\n      setLocation('/dashboard');\n    }\n  }, [user, setLocation]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      await login(email, password);\n      toast({\n        title: \"Login Successful\",\n        description: \"Welcome back to PC Worx!\",\n      });\n      \n      setLocation('/dashboard');\n    } catch (error) {\n      toast({\n        title: \"Login Failed\",\n        description: \"Invalid email or password. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md space-y-6\">\n        {/* Logo */}\n        <div className=\"text-center\">\n          <Link href=\"/\" className=\"inline-flex items-center space-x-2\">\n            <div className=\"w-12 h-12 bg-gradient-to-br from-primary to-accent rounded-lg flex items-center justify-center\">\n              <i className=\"fas fa-desktop text-primary-foreground text-xl\"></i>\n            </div>\n            <div>\n              <h1 className=\"text-2xl font-bold text-primary\">PC Worx</h1>\n              <p className=\"text-sm text-muted-foreground\">Electronics Kenya</p>\n            </div>\n          </Link>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-center\">Welcome Back</CardTitle>\n            <p className=\"text-center text-muted-foreground\">\n              Sign in to your PC Worx account\n            </p>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"email\">Email Address</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  placeholder=\"Enter your email\"\n                  required\n                  data-testid=\"input-login-email\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"password\">Password</Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"password\"\n                    type={showPassword ? \"text\" : \"password\"}\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                    placeholder=\"Enter your password\"\n                    required\n                    data-testid=\"input-login-password\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    data-testid=\"button-toggle-password\"\n                  >\n                    {showPassword ? (\n                      <EyeOff className=\"h-4 w-4\" />\n                    ) : (\n                      <Eye className=\"h-4 w-4\" />\n                    )}\n                  </Button>\n                </div>\n              </div>\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={isLoading}\n                data-testid=\"button-login-submit\"\n              >\n                {isLoading ? 'Signing in...' : 'Sign In'}\n              </Button>\n            </form>\n\n            <div className=\"mt-6 text-center space-y-4\">\n              <div className=\"text-sm text-muted-foreground\">\n                Don't have an account?{' '}\n                <Link href=\"/register\" className=\"text-primary hover:underline\" data-testid=\"link-register\">\n                  Create account\n                </Link>\n              </div>\n              \n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Features */}\n        <div className=\"text-center space-y-4\">\n          <div className=\"grid grid-cols-3 gap-4 text-xs\">\n            <div className=\"flex flex-col items-center space-y-1\">\n              <i className=\"fas fa-truck text-primary\"></i>\n              <span className=\"text-muted-foreground\">Free Delivery</span>\n            </div>\n            <div className=\"flex flex-col items-center space-y-1\">\n              <i className=\"fas fa-money-bill-wave text-primary\"></i>\n              <span className=\"text-muted-foreground\">Cash on Delivery</span>\n            </div>\n            <div className=\"flex flex-col items-center space-y-1\">\n              <i className=\"fas fa-shield-alt text-primary\"></i>\n              <span className=\"text-muted-foreground\">1 Year Warranty</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5725},"client/src/pages/ProductDetails.tsx":{"content":"import React, { useEffect, useState } from 'react';\nimport { useRoute, Link } from 'wouter';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useCart } from '@/contexts/CartContext';\nimport Header from '@/components/Header';\nimport Footer from '@/components/Footer';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Heart, Star, ShoppingCart, Minus, Plus } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\n\n// Helper function to normalize image URLs\nconst normalizeImageUrl = (imageUrl: string | null | undefined): string | null => {\n  if (!imageUrl) return null;\n  \n  // Fix malformed object storage URLs\n  if (imageUrl.startsWith('https://public-objects/')) {\n    return imageUrl.replace('https://public-objects/', '/public-objects/');\n  }\n  \n  // Return as-is for valid URLs\n  return imageUrl;\n};\n\nexport default function ProductDetails() {\n  const [, params] = useRoute('/products/:id');\n  const productId = params?.id;\n  const [quantity, setQuantity] = useState(1);\n  const [reviewRating, setReviewRating] = useState('5');\n  const [reviewComment, setReviewComment] = useState('');\n  \n  const { user, token } = useAuth();\n  const { addToCart } = useCart();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: product, isLoading } = useQuery({\n    queryKey: ['/api/products', productId],\n    queryFn: async () => {\n      const response = await apiRequest('GET', `/api/products/${productId}`);\n      return await response.json();\n    },\n    enabled: !!productId\n  });\n\n  const { data: reviews } = useQuery({\n    queryKey: ['/api/products', productId, 'reviews'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', `/api/products/${productId}/reviews`);\n      return await response.json();\n    },\n    enabled: !!productId\n  });\n\n  const reviewMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest('POST', `/api/products/${productId}/reviews`, { \n        rating: parseInt(reviewRating), \n        comment: reviewComment \n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Review submitted\",\n        description: \"Thank you for your review!\",\n      });\n      setReviewComment('');\n      queryClient.invalidateQueries({ queryKey: ['/api/products', productId, 'reviews'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/products', productId] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to submit review. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  useEffect(() => {\n    if (product) {\n      document.title = `${product.name} - ${product.category} | PC Worx Kenya`;\n      \n      const metaDescription = document.querySelector('meta[name=\"description\"]');\n      if (metaDescription) {\n        metaDescription.setAttribute('content', \n          `Buy ${product.name} in Nairobi. Price: KSh ${Number(product.price).toLocaleString()}. ${product.description || ''} Cash on delivery available. Electronics shop Kenya.`\n        );\n      }\n    }\n  }, [product]);\n\n  const handleAddToCart = () => {\n    if (!product || product.stock <= 0) {\n      toast({\n        title: \"Out of Stock\",\n        description: \"This product is currently out of stock.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    addToCart(product, quantity);\n    toast({\n      title: \"Added to Cart\",\n      description: `${quantity} x ${product.name} added to your cart.`,\n    });\n  };\n\n  const handleSubmitReview = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!user) {\n      toast({\n        title: \"Login Required\",\n        description: \"Please login to submit a review.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    reviewMutation.mutate();\n  };\n\n  const formatPrice = (price: string) => {\n    return `KSh ${Number(price).toLocaleString()}`;\n  };\n\n  const renderStars = (rating: string) => {\n    const numRating = Number(rating) || 0;\n    const stars = [];\n    for (let i = 1; i <= 5; i++) {\n      stars.push(\n        <Star\n          key={i}\n          className={`h-4 w-4 ${i <= numRating ? 'text-secondary fill-current' : 'text-gray-300'}`}\n        />\n      );\n    }\n    return stars;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"grid lg:grid-cols-2 gap-8\">\n            <div className=\"w-full h-96 bg-muted rounded-lg animate-pulse\"></div>\n            <div className=\"space-y-4\">\n              <div className=\"h-8 bg-muted rounded animate-pulse\"></div>\n              <div className=\"h-4 bg-muted rounded w-2/3 animate-pulse\"></div>\n              <div className=\"h-32 bg-muted rounded animate-pulse\"></div>\n            </div>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  if (!product) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <Card className=\"p-12 text-center\">\n            <h1 className=\"text-2xl font-bold mb-4\">Product Not Found</h1>\n            <p className=\"text-muted-foreground mb-4\">\n              The product you're looking for doesn't exist or has been removed.\n            </p>\n            <Link href=\"/products\">\n              <Button data-testid=\"button-back-to-products\">Back to Products</Button>\n            </Link>\n          </Card>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Breadcrumb */}\n        <nav className=\"flex text-sm text-muted-foreground mb-8\">\n          <Link href=\"/\" className=\"hover:text-foreground\">Home</Link>\n          <span className=\"mx-2\">/</span>\n          <Link href=\"/products\" className=\"hover:text-foreground\">Products</Link>\n          <span className=\"mx-2\">/</span>\n          <span className=\"text-foreground\">{product.name}</span>\n        </nav>\n\n        <div className=\"grid lg:grid-cols-2 gap-12\">\n          {/* Product Image */}\n          <div className=\"space-y-4\">\n            <img\n              src={normalizeImageUrl(product.imageUrl) || 'https://images.unsplash.com/photo-1505740420928-5e560c06d30e?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=600'}\n              alt={product.name}\n              className=\"w-full rounded-lg\"\n              data-testid=\"img-product-main\"\n              onError={(e) => {\n                e.currentTarget.src = 'https://images.unsplash.com/photo-1505740420928-5e560c06d30e?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=600';\n              }}\n            />\n          </div>\n\n          {/* Product Info */}\n          <div className=\"space-y-6\">\n            <div>\n              <div className=\"flex items-start justify-between mb-4\">\n                <h1 className=\"text-3xl font-bold text-foreground\" data-testid=\"text-product-title\">\n                  {product.name}\n                </h1>\n                {user && (\n                  <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-add-to-wishlist\">\n                    <Heart className=\"h-5 w-5\" />\n                  </Button>\n                )}\n              </div>\n\n              {product.averageRating && Number(product.averageRating) > 0 && (\n                <div className=\"flex items-center space-x-2 mb-4\">\n                  <div className=\"flex\">\n                    {renderStars(product.averageRating)}\n                  </div>\n                  <span className=\"text-sm text-muted-foreground\">\n                    ({Number(product.averageRating).toFixed(1)} out of 5)\n                  </span>\n                </div>\n              )}\n\n              <div className=\"space-y-2\">\n                <div className=\"text-3xl font-bold text-primary\" data-testid=\"text-product-price\">\n                  {formatPrice(product.price)}\n                </div>\n                <Badge \n                  variant={product.stock > 0 ? \"default\" : \"destructive\"}\n                  data-testid=\"badge-product-stock\"\n                >\n                  {product.stock > 0 ? `${product.stock} in stock` : 'Out of Stock'}\n                </Badge>\n              </div>\n            </div>\n\n            {/* Product Description */}\n            {product.description && (\n              <div>\n                <h3 className=\"font-semibold mb-2\">Description</h3>\n                <p className=\"text-muted-foreground\" data-testid=\"text-product-description\">\n                  {product.description}\n                </p>\n              </div>\n            )}\n\n            {/* Product Details */}\n            <div className=\"grid grid-cols-2 gap-4 text-sm\">\n              <div>\n                <span className=\"font-medium\">Category:</span>\n                <span className=\"ml-2 text-muted-foreground\" data-testid=\"text-product-category\">\n                  {product.category}\n                </span>\n              </div>\n              {product.brand && (\n                <div>\n                  <span className=\"font-medium\">Brand:</span>\n                  <span className=\"ml-2 text-muted-foreground\" data-testid=\"text-product-brand\">\n                    {product.brand}\n                  </span>\n                </div>\n              )}\n            </div>\n\n            {/* Quantity and Add to Cart */}\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center space-x-4\">\n                <label className=\"font-medium\">Quantity:</label>\n                <div className=\"flex items-center space-x-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setQuantity(Math.max(1, quantity - 1))}\n                    disabled={quantity <= 1}\n                    data-testid=\"button-decrease-quantity\"\n                  >\n                    <Minus className=\"h-4 w-4\" />\n                  </Button>\n                  <span className=\"w-12 text-center font-medium\" data-testid=\"text-quantity\">\n                    {quantity}\n                  </span>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setQuantity(Math.min(product.stock, quantity + 1))}\n                    disabled={quantity >= product.stock}\n                    data-testid=\"button-increase-quantity\"\n                  >\n                    <Plus className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n\n              <Button\n                onClick={handleAddToCart}\n                disabled={product.stock <= 0}\n                size=\"lg\"\n                className=\"w-full\"\n                data-testid=\"button-add-to-cart-main\"\n              >\n                <ShoppingCart className=\"mr-2 h-5 w-5\" />\n                Add to Cart\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Reviews Section */}\n        <div className=\"mt-16 space-y-8\">\n          <h2 className=\"text-2xl font-bold\">Customer Reviews</h2>\n\n          {/* Submit Review Form */}\n          {user && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Write a Review</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={handleSubmitReview} className=\"space-y-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium mb-2\">Rating</label>\n                    <Select value={reviewRating} onValueChange={setReviewRating}>\n                      <SelectTrigger className=\"w-32\" data-testid=\"select-review-rating\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"5\">5 Stars</SelectItem>\n                        <SelectItem value=\"4\">4 Stars</SelectItem>\n                        <SelectItem value=\"3\">3 Stars</SelectItem>\n                        <SelectItem value=\"2\">2 Stars</SelectItem>\n                        <SelectItem value=\"1\">1 Star</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium mb-2\">Comment</label>\n                    <Textarea\n                      value={reviewComment}\n                      onChange={(e) => setReviewComment(e.target.value)}\n                      placeholder=\"Share your experience with this product...\"\n                      rows={4}\n                      data-testid=\"textarea-review-comment\"\n                    />\n                  </div>\n                  \n                  <Button \n                    type=\"submit\" \n                    disabled={reviewMutation.isPending}\n                    data-testid=\"button-submit-review\"\n                  >\n                    {reviewMutation.isPending ? 'Submitting...' : 'Submit Review'}\n                  </Button>\n                </form>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Reviews List */}\n          <div className=\"space-y-4\">\n            {reviews?.length === 0 ? (\n              <Card className=\"p-8 text-center\">\n                <p className=\"text-muted-foreground\">No reviews yet. Be the first to review this product!</p>\n              </Card>\n            ) : (\n              reviews?.map((review: any) => (\n                <Card key={review.id}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-start justify-between mb-3\">\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"flex\">\n                          {renderStars(review.rating.toString())}\n                        </div>\n                        <span className=\"font-medium\">{review.rating}/5</span>\n                      </div>\n                      <span className=\"text-sm text-muted-foreground\">\n                        {new Date(review.createdAt).toLocaleDateString()}\n                      </span>\n                    </div>\n                    {review.comment && (\n                      <p className=\"text-muted-foreground\">{review.comment}</p>\n                    )}\n                  </CardContent>\n                </Card>\n              ))\n            )}\n          </div>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":14977},"client/src/pages/Products.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useLocation, Link } from 'wouter';\nimport { useQuery } from '@tanstack/react-query';\nimport Header from '@/components/Header';\nimport Footer from '@/components/Footer';\nimport ProductCard from '@/components/ProductCard';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Card } from '@/components/ui/card';\nimport { Search } from 'lucide-react';\nimport { apiRequest } from '@/lib/queryClient';\n\nexport default function Products() {\n  const [location] = useLocation();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [sortBy, setSortBy] = useState('');\n\n  // Parse URL parameters\n  useEffect(() => {\n    const urlParams = new URLSearchParams(location.split('?')[1] || '');\n    setSearchQuery(urlParams.get('search') || '');\n    setSelectedCategory(urlParams.get('category') || '');\n    setSortBy(urlParams.get('sort') || '');\n\n    // Set SEO meta tags\n    const categoryTitle = urlParams.get('category') \n      ? `${urlParams.get('category')} - ` \n      : '';\n    document.title = `${categoryTitle}Electronics Shop Nairobi | PC Worx Kenya`;\n  }, [location]);\n\n  const { data: products, isLoading, refetch } = useQuery({\n    queryKey: ['/api/products', searchQuery, selectedCategory, sortBy],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (searchQuery) params.append('search', searchQuery);\n      if (selectedCategory && selectedCategory !== 'all') params.append('category', selectedCategory);\n      if (sortBy && sortBy !== 'default') params.append('sort', sortBy);\n      const queryString = params.toString();\n      const url = queryString ? `/api/products?${queryString}` : '/api/products';\n      const response = await apiRequest('GET', url);\n      return await response.json();\n    }\n  });\n\n  const categories = [\n    { value: 'all', label: 'All Categories' },\n    { value: 'smartphones', label: 'Smartphones' },\n    { value: 'laptops', label: 'Laptops' },\n    { value: 'tvs', label: 'Smart TVs' },\n    { value: 'gaming', label: 'Gaming' },\n    { value: 'appliances', label: 'Home Appliances' }\n  ];\n\n  const priceRanges = [\n    { value: 'all', label: 'All Prices' },\n    { value: 'under-20000', label: 'Under KSh 20,000' },\n    { value: '20000-50000', label: 'KSh 20,000 - 50,000' },\n    { value: 'above-50000', label: 'Above KSh 50,000' }\n  ];\n\n  const sortOptions = [\n    { value: 'default', label: 'Default' },\n    { value: 'price_asc', label: 'Price: Low to High' },\n    { value: 'price_desc', label: 'Price: High to Low' },\n    { value: 'name', label: 'Name A-Z' },\n    { value: 'rating', label: 'Highest Rated' }\n  ];\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    refetch();\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-foreground mb-2\">Electronics Store</h1>\n          <p className=\"text-muted-foreground\">\n            Browse our complete collection of electronics available in Nairobi\n          </p>\n        </div>\n\n        {/* Search and Filters */}\n        <Card className=\"p-6 mb-8\">\n          <div className=\"space-y-4\">\n            <form onSubmit={handleSearch} className=\"flex-1\">\n              <div className=\"relative\">\n                <Input\n                  type=\"text\"\n                  placeholder=\"Search electronics in Nairobi...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"w-full pl-10 pr-4\"\n                  data-testid=\"input-product-search\"\n                />\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n              </div>\n            </form>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                <SelectTrigger data-testid=\"select-category\">\n                  <SelectValue placeholder=\"Category\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {categories.map((category) => (\n                    <SelectItem key={category.value} value={category.value}>\n                      {category.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n\n              <Select>\n                <SelectTrigger data-testid=\"select-price-range\">\n                  <SelectValue placeholder=\"Price Range\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {priceRanges.map((range) => (\n                    <SelectItem key={range.value} value={range.value}>\n                      {range.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n\n              <Select value={sortBy} onValueChange={setSortBy}>\n                <SelectTrigger data-testid=\"select-sort\">\n                  <SelectValue placeholder=\"Sort by\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {sortOptions.map((option) => (\n                    <SelectItem key={option.value} value={option.value}>\n                      {option.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n\n              <Button onClick={() => refetch()} data-testid=\"button-apply-filters\">\n                Apply Filters\n              </Button>\n            </div>\n          </div>\n        </Card>\n\n        {/* Products Grid */}\n        <div className=\"mb-6\">\n          <div className=\"flex justify-between items-center\">\n            <h2 className=\"text-xl font-semibold\">\n              {searchQuery ? `Search results for \"${searchQuery}\"` : 'All Products'}\n            </h2>\n            <span className=\"text-muted-foreground\" data-testid=\"text-product-count\">\n              {products?.length || 0} products found\n            </span>\n          </div>\n        </div>\n\n        {isLoading ? (\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {[...Array(8)].map((_, i) => (\n              <Card key={i} className=\"p-4 space-y-4\">\n                <div className=\"w-full h-48 bg-muted rounded-lg animate-pulse\"></div>\n                <div className=\"space-y-2\">\n                  <div className=\"h-4 bg-muted rounded animate-pulse\"></div>\n                  <div className=\"h-4 bg-muted rounded w-2/3 animate-pulse\"></div>\n                </div>\n              </Card>\n            ))}\n          </div>\n        ) : products?.length === 0 ? (\n          <Card className=\"p-12 text-center\">\n            <h3 className=\"text-lg font-semibold mb-2\">No products found</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              Try adjusting your search criteria or browse all categories\n            </p>\n            <Link href=\"/products\">\n              <Button data-testid=\"button-browse-all\">Browse All Products</Button>\n            </Link>\n          </Card>\n        ) : (\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {products?.map((product: any) => (\n              <ProductCard key={product.id} product={product} />\n            ))}\n          </div>\n        )}\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":7724},"client/src/pages/Register.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Link, useLocation } from 'wouter';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Eye, EyeOff, Check } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\nexport default function Register() {\n  const [, setLocation] = useLocation();\n  const { register, user } = useAuth();\n  const { toast } = useToast();\n\n  const [formData, setFormData] = useState({\n    firstName: '',\n    lastName: '',\n    email: '',\n    password: '',\n    confirmPassword: ''\n  });\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    document.title = 'Create Account - PC Worx Kenya';\n    \n    if (user) {\n      setLocation('/dashboard');\n    }\n  }, [user, setLocation]);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const validatePassword = (password: string) => {\n    return password.length >= 8;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    // Validation\n    if (!formData.firstName.trim() || !formData.lastName.trim()) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please enter your first and last name.\",\n        variant: \"destructive\",\n      });\n      setIsLoading(false);\n      return;\n    }\n\n    if (!validatePassword(formData.password)) {\n      toast({\n        title: \"Weak Password\",\n        description: \"Password must be at least 8 characters long.\",\n        variant: \"destructive\",\n      });\n      setIsLoading(false);\n      return;\n    }\n\n    if (formData.password !== formData.confirmPassword) {\n      toast({\n        title: \"Password Mismatch\",\n        description: \"Passwords do not match.\",\n        variant: \"destructive\",\n      });\n      setIsLoading(false);\n      return;\n    }\n\n    try {\n      await register(formData.email, formData.password, formData.firstName, formData.lastName);\n      toast({\n        title: \"Account Created\",\n        description: \"Your account has been created successfully. Please sign in.\",\n      });\n      setLocation('/login');\n    } catch (error) {\n      toast({\n        title: \"Registration Failed\",\n        description: \"Failed to create account. Email may already be in use.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md space-y-6\">\n        {/* Logo */}\n        <div className=\"text-center\">\n          <Link href=\"/\" className=\"inline-flex items-center space-x-2\">\n            <div className=\"w-12 h-12 bg-gradient-to-br from-primary to-accent rounded-lg flex items-center justify-center\">\n              <i className=\"fas fa-desktop text-primary-foreground text-xl\"></i>\n            </div>\n            <div>\n              <h1 className=\"text-2xl font-bold text-primary\">PC Worx</h1>\n              <p className=\"text-sm text-muted-foreground\">Electronics Kenya</p>\n            </div>\n          </Link>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-center\">Create Account</CardTitle>\n            <p className=\"text-center text-muted-foreground\">\n              Join PC Worx for great electronics deals\n            </p>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"firstName\">First Name</Label>\n                  <Input\n                    id=\"firstName\"\n                    name=\"firstName\"\n                    type=\"text\"\n                    value={formData.firstName}\n                    onChange={handleChange}\n                    placeholder=\"John\"\n                    required\n                    data-testid=\"input-register-first-name\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"lastName\">Last Name</Label>\n                  <Input\n                    id=\"lastName\"\n                    name=\"lastName\"\n                    type=\"text\"\n                    value={formData.lastName}\n                    onChange={handleChange}\n                    placeholder=\"Doe\"\n                    required\n                    data-testid=\"input-register-last-name\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"email\">Email Address</Label>\n                <Input\n                  id=\"email\"\n                  name=\"email\"\n                  type=\"email\"\n                  value={formData.email}\n                  onChange={handleChange}\n                  placeholder=\"john@example.com\"\n                  required\n                  data-testid=\"input-register-email\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"password\">Password</Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"password\"\n                    name=\"password\"\n                    type={showPassword ? \"text\" : \"password\"}\n                    value={formData.password}\n                    onChange={handleChange}\n                    placeholder=\"Create a strong password\"\n                    required\n                    data-testid=\"input-register-password\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    data-testid=\"button-toggle-register-password\"\n                  >\n                    {showPassword ? (\n                      <EyeOff className=\"h-4 w-4\" />\n                    ) : (\n                      <Eye className=\"h-4 w-4\" />\n                    )}\n                  </Button>\n                </div>\n                <div className=\"mt-2 text-xs text-muted-foreground flex items-center space-x-1\">\n                  {validatePassword(formData.password) ? (\n                    <Check className=\"h-3 w-3 text-green-500\" />\n                  ) : (\n                    <div className=\"w-3 h-3 rounded-full border border-muted-foreground\" />\n                  )}\n                  <span>At least 8 characters</span>\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"confirmPassword\">Confirm Password</Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"confirmPassword\"\n                    name=\"confirmPassword\"\n                    type={showConfirmPassword ? \"text\" : \"password\"}\n                    value={formData.confirmPassword}\n                    onChange={handleChange}\n                    placeholder=\"Confirm your password\"\n                    required\n                    data-testid=\"input-register-confirm-password\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                    onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                    data-testid=\"button-toggle-confirm-password\"\n                  >\n                    {showConfirmPassword ? (\n                      <EyeOff className=\"h-4 w-4\" />\n                    ) : (\n                      <Eye className=\"h-4 w-4\" />\n                    )}\n                  </Button>\n                </div>\n                {formData.confirmPassword && (\n                  <div className=\"mt-2 text-xs flex items-center space-x-1\">\n                    {formData.password === formData.confirmPassword ? (\n                      <>\n                        <Check className=\"h-3 w-3 text-green-500\" />\n                        <span className=\"text-green-600\">Passwords match</span>\n                      </>\n                    ) : (\n                      <>\n                        <div className=\"w-3 h-3 rounded-full border border-red-500\" />\n                        <span className=\"text-red-600\">Passwords don't match</span>\n                      </>\n                    )}\n                  </div>\n                )}\n              </div>\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={isLoading}\n                data-testid=\"button-register-submit\"\n              >\n                {isLoading ? 'Creating Account...' : 'Create Account'}\n              </Button>\n            </form>\n\n            <div className=\"mt-6 text-center\">\n              <div className=\"text-sm text-muted-foreground\">\n                Already have an account?{' '}\n                <Link href=\"/login\" className=\"text-primary hover:underline\" data-testid=\"link-login\">\n                  Sign in\n                </Link>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Benefits */}\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-center space-y-3\">\n              <h3 className=\"font-semibold text-sm\">Join PC Worx and enjoy:</h3>\n              <div className=\"grid grid-cols-1 gap-2 text-xs text-muted-foreground\">\n                <div className=\"flex items-center space-x-2\">\n                  <Check className=\"h-3 w-3 text-green-500\" />\n                  <span>Fast checkout and order tracking</span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Check className=\"h-3 w-3 text-green-500\" />\n                  <span>Exclusive deals and early access</span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Check className=\"h-3 w-3 text-green-500\" />\n                  <span>Wishlist and personalized recommendations</span>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10654},"client/src/pages/UserDashboard.tsx":{"content":"import React, { useEffect, useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { useAuth } from '@/contexts/AuthContext';\nimport Header from '@/components/Header';\nimport Footer from '@/components/Footer';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Package, Heart, User, Calendar, MapPin, Phone, Mail } from 'lucide-react';\nimport { apiRequest } from '@/lib/queryClient';\n\nexport default function UserDashboard() {\n  const { user, token } = useAuth();\n  const [activeTab, setActiveTab] = useState('orders');\n\n  useEffect(() => {\n    document.title = 'My Dashboard - PC Worx Kenya';\n    \n    if (!user) {\n      window.location.href = '/login';\n    }\n  }, [user]);\n\n  const { data: orders, isLoading: ordersLoading } = useQuery({\n    queryKey: ['/api/users', user?.id, 'orders'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', `/api/users/${user!.id}/orders`);\n      return await response.json();\n    },\n    enabled: !!user && !!token\n  });\n\n  const { data: wishlist, isLoading: wishlistLoading } = useQuery({\n    queryKey: ['/api/users', user?.id, 'wishlist'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', `/api/users/${user!.id}/wishlist`);\n      return await response.json();\n    },\n    enabled: !!user && !!token\n  });\n\n  const formatPrice = (price: string) => {\n    return `KSh ${Number(price).toLocaleString()}`;\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pending': return 'bg-yellow-100 text-yellow-800';\n      case 'processing': return 'bg-blue-100 text-blue-800';\n      case 'shipped': return 'bg-purple-100 text-purple-800';\n      case 'delivered': return 'bg-green-100 text-green-800';\n      case 'cancelled': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Dashboard Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-foreground mb-2\" data-testid=\"text-dashboard-title\">\n            Welcome back, {user.firstName || user.email}!\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Manage your orders, wishlist, and account settings\n          </p>\n        </div>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"orders\" className=\"flex items-center space-x-2\" data-testid=\"tab-orders\">\n              <Package className=\"h-4 w-4\" />\n              <span>My Orders</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"wishlist\" className=\"flex items-center space-x-2\" data-testid=\"tab-wishlist\">\n              <Heart className=\"h-4 w-4\" />\n              <span>Wishlist</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"profile\" className=\"flex items-center space-x-2\" data-testid=\"tab-profile\">\n              <User className=\"h-4 w-4\" />\n              <span>Profile</span>\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Orders Tab */}\n          <TabsContent value=\"orders\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Order History</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {ordersLoading ? (\n                  <div className=\"space-y-4\">\n                    {[...Array(3)].map((_, i) => (\n                      <div key={i} className=\"h-24 bg-muted rounded-lg animate-pulse\"></div>\n                    ))}\n                  </div>\n                ) : orders?.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <Package className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-semibold mb-2\">No orders yet</h3>\n                    <p className=\"text-muted-foreground mb-4\">\n                      Start shopping to see your orders here\n                    </p>\n                    <Button onClick={() => window.location.href = '/products'} data-testid=\"button-start-shopping\">\n                      Start Shopping\n                    </Button>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {orders?.map((order: any) => (\n                      <Card key={order.id} className=\"border\">\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-center justify-between mb-3\">\n                            <div className=\"flex items-center space-x-3\">\n                              <div>\n                                <div className=\"font-semibold\" data-testid={`text-order-id-${order.id}`}>\n                                  Order #{order.id.slice(-8).toUpperCase()}\n                                </div>\n                                <div className=\"text-sm text-muted-foreground flex items-center space-x-1\">\n                                  <Calendar className=\"h-3 w-3\" />\n                                  <span>{new Date(order.createdAt).toLocaleDateString()}</span>\n                                </div>\n                              </div>\n                            </div>\n                            <div className=\"text-right\">\n                              <div className=\"font-bold text-lg\" data-testid={`text-order-total-${order.id}`}>\n                                {formatPrice(order.total)}\n                              </div>\n                              <Badge className={getStatusColor(order.status)} data-testid={`badge-order-status-${order.id}`}>\n                                {order.status.charAt(0).toUpperCase() + order.status.slice(1)}\n                              </Badge>\n                            </div>\n                          </div>\n                          \n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                            <div className=\"flex items-start space-x-2\">\n                              <User className=\"h-4 w-4 text-muted-foreground mt-0.5\" />\n                              <div>\n                                <div className=\"font-medium\">Customer:</div>\n                                <div className=\"text-muted-foreground\">{order.customerName}</div>\n                              </div>\n                            </div>\n                            \n                            <div className=\"flex items-start space-x-2\">\n                              <Phone className=\"h-4 w-4 text-muted-foreground mt-0.5\" />\n                              <div>\n                                <div className=\"font-medium\">Contact:</div>\n                                <div className=\"text-muted-foreground\">{order.contactNumber}</div>\n                              </div>\n                            </div>\n                            \n                            <div className=\"flex items-start space-x-2 md:col-span-2\">\n                              <MapPin className=\"h-4 w-4 text-muted-foreground mt-0.5\" />\n                              <div>\n                                <div className=\"font-medium\">Delivery Address:</div>\n                                <div className=\"text-muted-foreground\">{order.deliveryAddress}</div>\n                              </div>\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Wishlist Tab */}\n          <TabsContent value=\"wishlist\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>My Wishlist</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {wishlistLoading ? (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                    {[...Array(6)].map((_, i) => (\n                      <div key={i} className=\"h-48 bg-muted rounded-lg animate-pulse\"></div>\n                    ))}\n                  </div>\n                ) : wishlist?.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <Heart className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-semibold mb-2\">Your wishlist is empty</h3>\n                    <p className=\"text-muted-foreground mb-4\">\n                      Save products you like for later\n                    </p>\n                    <Button onClick={() => window.location.href = '/products'} data-testid=\"button-browse-products\">\n                      Browse Products\n                    </Button>\n                  </div>\n                ) : (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                    {wishlist?.map((item: any) => (\n                      <Card key={item.id} className=\"border\">\n                        <CardContent className=\"p-4\">\n                          <div className=\"aspect-square bg-muted rounded-lg mb-3 flex items-center justify-center\">\n                            <Package className=\"h-8 w-8 text-muted-foreground\" />\n                          </div>\n                          <h4 className=\"font-semibold mb-2\" data-testid={`text-wishlist-item-${item.id}`}>\n                            Wishlist Item\n                          </h4>\n                          <div className=\"flex items-center justify-between\">\n                            <Button size=\"sm\" data-testid={`button-add-to-cart-${item.id}`}>\n                              Add to Cart\n                            </Button>\n                            <Button variant=\"ghost\" size=\"sm\" data-testid={`button-remove-wishlist-${item.id}`}>\n                              Remove\n                            </Button>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Profile Tab */}\n          <TabsContent value=\"profile\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Profile Information</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"firstName\">First Name</Label>\n                    <Input\n                      id=\"firstName\"\n                      type=\"text\"\n                      value={user.firstName || ''}\n                      readOnly\n                      data-testid=\"input-first-name\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"lastName\">Last Name</Label>\n                    <Input\n                      id=\"lastName\"\n                      type=\"text\"\n                      value={user.lastName || ''}\n                      readOnly\n                      data-testid=\"input-last-name\"\n                    />\n                  </div>\n                  \n                  <div className=\"md:col-span-2\">\n                    <Label htmlFor=\"email\">Email Address</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      value={user.email}\n                      readOnly\n                      data-testid=\"input-email\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"pt-4\">\n                  <div className=\"flex items-center space-x-3 p-4 bg-muted/50 rounded-lg\">\n                    <Mail className=\"h-5 w-5 text-muted-foreground\" />\n                    <div className=\"text-sm\">\n                      <div className=\"font-medium\">Account Status</div>\n                      <div className=\"text-muted-foreground\">\n                        Active customer since {new Date().toLocaleDateString()}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":12895},"client/src/pages/not-found.tsx":{"content":"import React from 'react';\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":738},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"README.md":{"content":"# PC Worx - Electronics E-Commerce Platform\n\nA modern Progressive Web App (PWA) for selling electronics in Kenya, built with React, Node.js, and PostgreSQL.\n\n## Features\n\n- 🛒 Full e-commerce functionality with shopping cart\n- 👨‍💼 Admin dashboard for product and order management\n- 📱 Progressive Web App (PWA) - installable on mobile and desktop\n- 🔐 JWT-based authentication with role-based access control\n- 💳 Cash on delivery payment option\n- 📊 Analytics and reporting for admins\n- 🌐 SEO optimized for Kenya/Nairobi market\n- ☁️ Cloud image storage integration\n\n## Tech Stack\n\n- **Frontend**: React 18, TypeScript, Tailwind CSS, Wouter (routing)\n- **Backend**: Node.js, Express, TypeScript\n- **Database**: PostgreSQL with Drizzle ORM\n- **UI Components**: Radix UI, shadcn/ui\n- **State Management**: React Query, Context API\n- **Build Tool**: Vite\n- **Deployment**: Vercel, Netlify, or local hosting\n\n## Quick Start\n\n### Prerequisites\n\n- Node.js 18+ \n- PostgreSQL database\n- Git\n\n### Local Development\n\n1. **Clone the repository**\n   ```bash\n   git clone <your-repo-url>\n   cd pc-worx\n   ```\n\n2. **Install dependencies**\n   ```bash\n   npm install\n   ```\n\n3. **Setup environment variables**\n   Create a `.env` file in the root directory:\n   ```env\n   DATABASE_URL=your_postgresql_connection_string\n   JWT_SECRET=your_jwt_secret_key\n   NODE_ENV=development\n   ```\n\n4. **Setup the database**\n   ```bash\n   npm run db:push\n   ```\n\n5. **Start the development server**\n   ```bash\n   npm run dev\n   ```\n\n   The app will be available at `http://localhost:5000`\n\n### Production Build\n\n```bash\nnpm run build\nnpm start\n```\n\n## Deployment\n\n### Vercel Deployment\n\n1. **Push to GitHub/GitLab**\n   ```bash\n   git add .\n   git commit -m \"Initial commit\"\n   git push origin main\n   ```\n\n2. **Deploy to Vercel**\n   - Connect your repository to Vercel\n   - Add environment variables in Vercel dashboard\n   - Deploy automatically on push\n\n### Netlify Deployment\n\n1. **Build and deploy**\n   - Connect your repository to Netlify\n   - Set build command: `npm run build`\n   - Set publish directory: `client/dist`\n   - Add environment variables in Netlify dashboard\n\n### Local Production Hosting\n\n1. **Build the application**\n   ```bash\n   npm run build\n   ```\n\n2. **Start the production server**\n   ```bash\n   npm start\n   ```\n\n## Environment Variables\n\n| Variable | Description | Required |\n|----------|-------------|----------|\n| `DATABASE_URL` | PostgreSQL connection string | Yes |\n| `JWT_SECRET` | Secret key for JWT tokens | Yes |\n| `NODE_ENV` | Environment (development/production) | Yes |\n| `DEFAULT_OBJECT_STORAGE_BUCKET_ID` | Object storage bucket ID | No |\n| `PUBLIC_OBJECT_SEARCH_PATHS` | Public object storage paths | No |\n| `PRIVATE_OBJECT_DIR` | Private object storage directory | No |\n\n## Project Structure\n\n```\npc-today/\n├── client/                 # React frontend\n│   ├── src/\n│   │   ├── components/     # Reusable UI components\n│   │   ├── pages/          # Page components\n│   │   ├── contexts/       # React contexts\n│   │   ├── hooks/          # Custom hooks\n│   │   └── lib/            # Utility functions\n│   └── public/             # Static assets\n├── server/                 # Express backend\n│   ├── routes.ts           # API routes\n│   ├── storage.ts          # Database operations\n│   └── index.ts            # Server entry point\n├── shared/                 # Shared types and schemas\n│   └── schema.ts           # Database schema\n├── vercel.json             # Vercel configuration\n├── netlify.toml            # Netlify configuration\n└── package.json            # Dependencies and scripts\n```\n\n## Admin Features\n\n- User management (create/edit/delete users and admins)\n- Product management (CRUD operations)\n- Order processing and status updates\n- Analytics dashboard\n- Activity logging\n\n## PWA Features\n\n- Offline functionality with service worker\n- Installable on mobile and desktop\n- Push notifications support\n- Background sync for offline orders\n- App shortcuts for quick access\n\n## SEO Optimization\n\n- Dynamic meta tags for products and categories\n- Sitemap generation\n- Robots.txt configuration\n- Kenya/Nairobi market keywords\n- Semantic HTML structure\n\n## Contributing\n\n1. Fork the repository\n2. Create a feature branch\n3. Make your changes\n4. Test thoroughly\n5. Submit a pull request\n\n## License\n\nMIT License - see LICENSE file for details\n\n## Support\n\nFor support or questions, please open an issue on the repository.","size_bytes":4596},"netlify.toml":{"content":"[build]\n  base = \".\"\n  command = \"npm run build\"\n  publish = \"client/dist\"\n  functions = \"dist\"\n\n[build.environment]\n  NODE_ENV = \"production\"\n  NODE_VERSION = \"18\"\n\n[[redirects]]\n  from = \"/api/*\"\n  to = \"/.netlify/functions/index/:splat\"\n  status = 200\n\n[[redirects]]\n  from = \"/*\"\n  to = \"/index.html\"\n  status = 200\n\n[functions]\n  node_bundler = \"esbuild\"\n\n[[headers]]\n  for = \"/sw.js\"\n  [headers.values]\n    Cache-Control = \"no-cache\"\n\n[[headers]]\n  for = \"/manifest.json\"\n  [headers.values]\n    Cache-Control = \"public, max-age=31536000\"\n\n[[headers]]\n  for = \"/*.js\"\n  [headers.values]\n    Cache-Control = \"public, max-age=31536000, immutable\"\n\n[[headers]]\n  for = \"/*.css\"\n  [headers.values]\n    Cache-Control = \"public, max-age=31536000, immutable\"","size_bytes":756},"client/src/components/ObjectUploader.tsx":{"content":"import React, { useState, useRef } from \"react\";\nimport type { ReactNode } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\n\ninterface ObjectUploaderProps {\n  maxFileSize?: number;\n  onComplete?: (imageUrl: string) => void;\n  buttonClassName?: string;\n  children: ReactNode;\n  token: string;\n}\n\n/**\n * A simplified file upload component for product images.\n * \n * Features:\n * - File selection with drag and drop support\n * - Image preview\n * - Upload progress indication\n * - Direct upload to cloud storage\n * \n * @param props - Component props\n * @param props.maxFileSize - Maximum file size in bytes (default: 5MB)\n * @param props.onComplete - Callback function called when upload is complete\n * @param props.buttonClassName - Optional CSS class name for the button\n * @param props.children - Content to be rendered inside the button\n * @param props.token - Authentication token for API calls\n */\nexport function ObjectUploader({\n  maxFileSize = 5242880, // 5MB default\n  onComplete,\n  buttonClassName,\n  children,\n  token,\n}: ObjectUploaderProps) {\n  const [isUploading, setIsUploading] = useState(false);\n  const [preview, setPreview] = useState<string | null>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const handleFileSelect = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    // Validate file type\n    if (!file.type.startsWith('image/')) {\n      alert('Please select an image file');\n      return;\n    }\n\n    // Validate file size\n    if (file.size > maxFileSize) {\n      alert(`File size must be less than ${Math.round(maxFileSize / 1024 / 1024)}MB`);\n      return;\n    }\n\n    // Show preview\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      setPreview(e.target?.result as string);\n    };\n    reader.readAsDataURL(file);\n\n    setIsUploading(true);\n\n    try {\n      // Get upload URL from server\n      const uploadResponse = await fetch('/api/objects/upload', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!uploadResponse.ok) {\n        throw new Error('Failed to get upload URL');\n      }\n\n      const { uploadURL } = await uploadResponse.json();\n\n      // Upload file directly to cloud storage\n      const uploadResult = await fetch(uploadURL, {\n        method: 'PUT',\n        body: file,\n        headers: {\n          'Content-Type': file.type,\n        },\n      });\n\n      if (!uploadResult.ok) {\n        throw new Error('Failed to upload file');\n      }\n\n      // Convert uploaded URL to public serving URL\n      const url = new URL(uploadURL);\n      const pathParts = url.pathname.split('/');\n      const objectPath = pathParts.slice(2).join('/');\n      const publicUrl = `/public-objects/${objectPath}`;\n\n      onComplete?.(publicUrl);\n      setPreview(null);\n      \n      // Reset file input\n      if (fileInputRef.current) {\n        fileInputRef.current.value = '';\n      }\n\n    } catch (error) {\n      console.error('Upload error:', error);\n      alert('Failed to upload image. Please try again.');\n      setPreview(null);\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  const handleButtonClick = () => {\n    fileInputRef.current?.click();\n  };\n\n  return (\n    <div className=\"space-y-2\">\n      <Input\n        ref={fileInputRef}\n        type=\"file\"\n        accept=\"image/*\"\n        onChange={handleFileSelect}\n        className=\"hidden\"\n        data-testid=\"input-image-file\"\n      />\n      \n      <Button \n        type=\"button\" \n        onClick={handleButtonClick}\n        className={buttonClassName}\n        disabled={isUploading}\n        data-testid=\"button-upload-image\"\n      >\n        {isUploading ? 'Uploading...' : children}\n      </Button>\n\n      {preview && (\n        <div className=\"mt-2\">\n          <img \n            src={preview}\n            alt=\"Upload preview\" \n            className=\"max-w-32 max-h-32 object-cover rounded border\"\n          />\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":4133},"server/objectStorage.ts":{"content":"import { Storage, File } from \"@google-cloud/storage\";\nimport { Response } from \"express\";\nimport { randomUUID } from \"crypto\";\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\n// The object storage client is used to interact with the object storage service.\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\n// The object storage service is used to interact with the object storage service.\nexport class ObjectStorageService {\n  constructor() {}\n\n  // Gets the public object search paths.\n  getPublicObjectSearchPaths(): Array<string> {\n    const pathsStr = process.env.PUBLIC_OBJECT_SEARCH_PATHS || \"\";\n    const paths = Array.from(\n      new Set(\n        pathsStr\n          .split(\",\")\n          .map((path) => path.trim())\n          .filter((path) => path.length > 0)\n      )\n    );\n    if (paths.length === 0) {\n      throw new Error(\n        \"PUBLIC_OBJECT_SEARCH_PATHS not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PUBLIC_OBJECT_SEARCH_PATHS env var (comma-separated paths).\"\n      );\n    }\n    return paths;\n  }\n\n  // Gets the private object directory.\n  getPrivateObjectDir(): string {\n    const dir = process.env.PRIVATE_OBJECT_DIR || \"\";\n    if (!dir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n    return dir;\n  }\n\n  // Search for a public object from the search paths.\n  async searchPublicObject(filePath: string): Promise<File | null> {\n    for (const searchPath of this.getPublicObjectSearchPaths()) {\n      const fullPath = `${searchPath}/${filePath}`;\n\n      // Full path format: /<bucket_name>/<object_name>\n      const { bucketName, objectName } = parseObjectPath(fullPath);\n      const bucket = objectStorageClient.bucket(bucketName);\n      const file = bucket.file(objectName);\n\n      // Check if file exists\n      const [exists] = await file.exists();\n      if (exists) {\n        return file;\n      }\n    }\n\n    return null;\n  }\n\n  // Downloads an object to the response.\n  async downloadObject(file: File, res: Response, cacheTtlSec: number = 3600) {\n    try {\n      // Get file metadata\n      const [metadata] = await file.getMetadata();\n      \n      // Set appropriate headers\n      res.set({\n        \"Content-Type\": metadata.contentType || \"application/octet-stream\",\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": `public, max-age=${cacheTtlSec}`,\n      });\n\n      // Stream the file to the response\n      const stream = file.createReadStream();\n\n      stream.on(\"error\", (err: any) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n\n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ error: \"Error downloading file\" });\n      }\n    }\n  }\n\n  // Gets the upload URL for a public object (product images).\n  async getPublicUploadURL(): Promise<string> {\n    const publicPaths = this.getPublicObjectSearchPaths();\n    if (!publicPaths.length) {\n      throw new Error(\n        \"PUBLIC_OBJECT_SEARCH_PATHS not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PUBLIC_OBJECT_SEARCH_PATHS env var.\"\n      );\n    }\n\n    const imageId = randomUUID();\n    const fullPath = `${publicPaths[0]}/products/${imageId}.jpg`;\n\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n\n    // Sign URL for PUT method with TTL\n    return signObjectURL({\n      bucketName,\n      objectName,\n      method: \"PUT\",\n      ttlSec: 900,\n    });\n  }\n\n  // Convert uploaded URL to public serving URL\n  normalizePublicObjectPath(rawPath: string): string {\n    if (!rawPath.startsWith(\"https://storage.googleapis.com/\")) {\n      return rawPath;\n    }\n  \n    // Extract the path from the URL by removing query parameters and domain\n    const url = new URL(rawPath);\n    const rawObjectPath = url.pathname;\n  \n    const publicPaths = this.getPublicObjectSearchPaths();\n    for (const publicPath of publicPaths) {\n      if (rawObjectPath.startsWith(publicPath)) {\n        // Extract the relative path from the public directory\n        const relativePath = rawObjectPath.slice(publicPath.length + 1);\n        return `/public-objects/${relativePath}`;\n      }\n    }\n    \n    return rawObjectPath;\n  }\n}\n\nfunction parseObjectPath(path: string): {\n  bucketName: string;\n  objectName: string;\n} {\n  if (!path.startsWith(\"/\")) {\n    path = `/${path}`;\n  }\n  const pathParts = path.split(\"/\");\n  if (pathParts.length < 3) {\n    throw new Error(\"Invalid path: must contain at least a bucket name\");\n  }\n\n  const bucketName = pathParts[1];\n  const objectName = pathParts.slice(2).join(\"/\");\n\n  return {\n    bucketName,\n    objectName,\n  };\n}\n\nasync function signObjectURL({\n  bucketName,\n  objectName,\n  method,\n  ttlSec,\n}: {\n  bucketName: string;\n  objectName: string;\n  method: \"GET\" | \"PUT\" | \"DELETE\" | \"HEAD\";\n  ttlSec: number;\n}): Promise<string> {\n  const request = {\n    bucket_name: bucketName,\n    object_name: objectName,\n    method,\n    expires_at: new Date(Date.now() + ttlSec * 1000).toISOString(),\n  };\n  const response = await fetch(\n    `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(request),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to sign object URL, errorcode: ${response.status}, ` +\n        `make sure you're running on Replit`\n    );\n  }\n\n  const { signed_url: signedURL } = await response.json();\n  return signedURL;\n}","size_bytes":6353}},"version":1}